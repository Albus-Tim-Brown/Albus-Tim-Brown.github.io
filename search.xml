<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>添加文件下载</title>
      <link href="/2023/08/17/%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2023/08/17/%E6%B7%BB%E5%8A%A0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="解决遗留问题"><a href="#解决遗留问题" class="headerlink" title="解决遗留问题"></a>解决遗留问题</h2><p>前面我们说道，手机版使用本博客的时候可能会遇到pdf文件无法显示的问题</p><p>针对此问题，本来应该可以通过使用pdf.js解决</p><p>但很不幸的是，依旧有部分手机无法显示pdf文件</p><p>既然无法解决此类问题，不妨就让手机使用博客的人不用之间点击阅读加载</p><p>而是之间点击当前博文上的按钮点击下载文件</p><p>这样即方便阅读的人保存pdf文件，又能让无法加载pdf也能阅读</p> <span id="more"></span><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>首先，依旧需要修改博客根目录下的配置文件</p><p>_config.yaml文件</p><p>将post_asset_folder的值更改为true</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>修改完成后保存</p><h2 id="创建文件存放目录"><a href="#创建文件存放目录" class="headerlink" title="创建文件存放目录"></a>创建文件存放目录</h2><p>然后，在source目录下创建一个download文件夹</p><p>将需要分享的文件存放到此处</p><p>在写文章的时候，使用以下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[点击下载](/download/文件全名)</span><br></pre></td></tr></table></figure><p>如果想让其下载其他目录的文件</p><p>比如说，之前新建的pdf文件夹下的pdf文件</p><p>那么就将download更改成pdf即可</p><p>文件名也填写成对应pdf文件</p><p>又或者是，你可以直接输入下载链接，让观看者下载对应网络上的文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加PDF文件支持</title>
      <link href="/2023/08/17/%E6%B7%BB%E5%8A%A0PDF%E6%96%87%E4%BB%B6%E6%94%AF%E6%8C%81/"/>
      <url>/2023/08/17/%E6%B7%BB%E5%8A%A0PDF%E6%96%87%E4%BB%B6%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<h2 id="目前博文的现状"><a href="#目前博文的现状" class="headerlink" title="目前博文的现状"></a>目前博文的现状</h2><p>由于PDF文件转md文件实现起来存在一系列问题</p><p>包括但不限于PDF内图片加载问题、格式问题、以及字体问题等</p><p>目前能想到的方法只有复制粘贴文本到md文件内，而图片则保存到本地</p><p>通过路径映射到md文件内，十分的麻烦</p><p>那么有没有一种工具能直接在博文内显示PDF文件内容呢？</p> <span id="more"></span><h2 id="方法一：通过hexo-pdf工具"><a href="#方法一：通过hexo-pdf工具" class="headerlink" title="方法一：通过hexo-pdf工具"></a>方法一：通过hexo-pdf工具</h2><p>这种方法是最简单也是最快捷的插入PDF文件的方式</p><p>需要先安装hexo-pdf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure><p>然后只需要在博客目录的source文件夹内创建一个新文件夹（例如“pdf”文件夹）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir pdf</span><br></pre></td></tr></table></figure><p>最后，只需要在md文件内映射pdf文件即可</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf /pdf/name.pdf %&#125;</span><br></pre></td></tr></table></figure><p>但是这样会有一些问题：</p><p><img src="/images/content-8-1.png"></p><p>文档难以阅读，没有跳转列表</p><p>如何解决这样的问题呢？</p><h2 id="方法二：使用pdf-js"><a href="#方法二：使用pdf-js" class="headerlink" title="方法二：使用pdf.js"></a>方法二：使用pdf.js</h2><p>这是一个基于 Web 标准的通用平台，用于解析和呈现 PDF的js</p><p>使用方法也很简单，前往<a href="https://mozilla.github.io/pdf.js/">https://mozilla.github.io/pdf.js/</a></p><p>下载最新稳定版本，选择Old会支持更老版本的浏览器，理论上兼容性更好</p><p>然后解压到主题文件夹根目录的source目录下的一个pdfjs文件夹（需要自己创建）</p><p>然后在Hexo文件内配置以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="string">myjs/**</span>]</span><br></pre></td></tr></table></figure><p>之后需要修改pdfjs下，web文件内的viewer.js文件内容</p><p>将以下内容注释掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">PDFViewerApplication</span> = <span class="title class_">PDFViewerApplication</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">HOSTED_VIEWER_ORIGINS</span> = [<span class="string">&quot;null&quot;</span>, <span class="string">&quot;http://mozilla.github.io&quot;</span>, <span class="string">&quot;https://mozilla.github.io&quot;</span>];</span><br><span class="line">  <span class="keyword">var</span> validateFileURL = <span class="keyword">function</span> (<span class="params">file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!file) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> viewerOrigin = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>).<span class="property">origin</span> || <span class="string">&quot;null&quot;</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable constant_">HOSTED_VIEWER_ORIGINS</span>.<span class="title function_">includes</span>(viewerOrigin)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> fileOrigin = <span class="keyword">new</span> <span class="title function_">URL</span>(file, <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>).<span class="property">origin</span>;</span><br><span class="line">      <span class="comment">// if (fileOrigin !== viewerOrigin) &#123;</span></span><br><span class="line">      <span class="comment">//   throw new Error(&quot;file origin does not match viewer&#x27;s&quot;);</span></span><br><span class="line">      <span class="comment">// &#125;//注释掉此处的内容</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">      <span class="title class_">PDFViewerApplication</span>.<span class="property">l10n</span>.<span class="title function_">get</span>(<span class="string">&quot;loading_error&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">PDFViewerApplication</span>.<span class="title function_">_documentError</span>(msg, &#123;</span><br><span class="line">          <span class="attr">message</span>: ex?.<span class="property">message</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在md文档中使用 iframe标签配合pdf.js完成对PDF文件内容的显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&#x27;/myjs/pdfjs/web/viewer.html?file=&lt;文件链接(可以是来自网上的，也可以是本地的)&gt;&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;width:100%;height:100%&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>映射本地的文件可以采用方案一的做法来映射</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaAPI</title>
      <link href="/2023/08/17/JavaAPI/"/>
      <url>/2023/08/17/JavaAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="About-JavaAPI"><a href="#About-JavaAPI" class="headerlink" title="About JavaAPI"></a>About JavaAPI</h1><p>如果要阅读pdf文件，请直接点击阅读全文，手机版本网页可能无法正常显示，这可能需要下载pdf文件</p><p><a href="/pdf/03-JavaAPI.pdf">点击此处直接下载文件</a></p> <span id="more"></span><iframe src='/myjs/pdfjs/web/viewer.html?file=/pdf/03-JavaAPI.pdf' style='width:100%;height:720px'></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP</title>
      <link href="/2023/08/17/OOP/"/>
      <url>/2023/08/17/OOP/</url>
      
        <content type="html"><![CDATA[<h1 id="About-OOP"><a href="#About-OOP" class="headerlink" title="About OOP"></a>About OOP</h1><p>如果要阅读pdf文件，请直接点击阅读全文，手机版本网页可能无法正常显示，这可能需要下载pdf文件</p><p><a href="/pdf/02-OOP.pdf">点击此处直接下载文件</a></p> <span id="more"></span><iframe src='/myjs/pdfjs/web/viewer.html?file=/pdf/02-OOP.pdf' style='width:100%;height:720px'></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE</title>
      <link href="/2023/08/17/JavaSE/"/>
      <url>/2023/08/17/JavaSE/</url>
      
        <content type="html"><![CDATA[<h2 id="About-Java"><a href="#About-Java" class="headerlink" title="About Java"></a>About Java</h2><p>如果要阅读pdf文件，请直接点击阅读全文，手机版本网页可能无法正常显示，这可能需要下载pdf文件</p><p><a href="/pdf/01-JavaSE.pdf">点击此处直接下载文件</a></p> <span id="more"></span><iframe src='/myjs/pdfjs/web/viewer.html?file=/pdf/01-JavaSE.pdf' style='width:100%;height:720px'></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb-Study</title>
      <link href="/2023/08/17/Java-Web-Study/"/>
      <url>/2023/08/17/Java-Web-Study/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习本文需要先学习JavaSE内容</p><p>本文最初编辑时间：2022年10月26日 星期三</p><p>java   数据库  jdbc&#x3D;&#x3D;&#x3D;&#x3D;通过java程序访问数据库</p><p>HTML  CSS  JS  Jquery&#x3D;&#x3D;&#x3D;&#x3D;开发静态网页</p><p>servlet  JSP&#x3D;&#x3D;&#x3D;&#x3D;开发动态网页</p><p>概念   servlet   JSP   脚本元素   指令元素  动作元素   九大内置对象   </p><p>EL   JSTL  文件上传下载   过滤器  监听器   AJAX</p> <span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="一、web相关的概念："><a href="#一、web相关的概念：" class="headerlink" title="一、web相关的概念："></a>一、web相关的概念：</h2><h3 id="1、什么是互联网："><a href="#1、什么是互联网：" class="headerlink" title="1、什么是互联网："></a>1、什么是互联网：</h3><p>internet—–互联网</p><p>互联网是计算机网络，由多个服务器和局域网组成。</p><p>没有主次服务器之分，不受地理位置限制。</p><p>优点：信息共享。</p><p>信息格式统一：要遵循HTML标准编写。</p><h3 id="2、什么是web："><a href="#2、什么是web：" class="headerlink" title="2、什么是web："></a>2、什么是web：</h3><p>web又称为万维网，是目前internet上使用最广泛的信息服务类型。另外还有邮件服务、新闻服务等等</p><p>web程序都是以超文本标记语言（HTML）进行组织。以超文本传输协议（HTTP）进行传输。</p><h3 id="3、URL和URI：（重点）"><a href="#3、URL和URI：（重点）" class="headerlink" title="3、URL和URI：（重点）"></a>3、URL和URI：（重点）</h3><p>URL：Uniform   Resource   Locator  统一资源定位器。</p><p>组成：协议名   服务器名或IP地址+端口号  路径名   文件名 四部分组成。</p><p>如：<a href="http://localhost:8080/sub/ok.jsp">http://localhost:8080/sub/ok.jsp</a>      localhost主机名—-127.0.0.1</p><p>URI：Uniform   Resource   Identifier  统一资源标识符</p><p>组成：协议名   服务器名或IP地址+端口号  路径名  三部分组成。</p><p>URL 是 URI 的一个子集。</p><h3 id="4、什么是web程序："><a href="#4、什么是web程序：" class="headerlink" title="4、什么是web程序："></a>4、什么是web程序：</h3><p>web程序在服务器上存储。</p><p>web程序在服务器上执行。</p><p>通过浏览器给服务器发送请求，服务器收到请求后，根据请求的URL解析出要执行的文件执行，将执行结果响应给客户端的浏览器，浏览器接收到服务器端响应的数据，执行该代码，在浏览器上显示。</p><p>web程序处理的结果信息格式要符合HTML格式要求。</p><p>浏览器通过超链接、表单、地址栏、JS程序等方式给服务器发送请求。</p><h3 id="5、B-S架构和C-S架构：（重点）"><a href="#5、B-S架构和C-S架构：（重点）" class="headerlink" title="5、B&#x2F;S架构和C&#x2F;S架构：（重点）"></a>5、B&#x2F;S架构和C&#x2F;S架构：（重点）</h3><p>B&#x2F;S：Browser&#x2F;Server  浏览器&#x2F;服务器     web程序开发   如：搜狐、网易等web程序</p><p>C&#x2F;S：Client&#x2F;Server客户端&#x2F;服务器端    网络通信–TCP套接字、UDP套接字  如：QQ、微信等程序</p><p>相同：网络程序开发。</p><p>B&#x2F;S优点：</p><p>开发成本低。</p><p>管理维护简单。</p><p>产品升级便利。</p><p>用户使用方便，出现故障的概率小。</p><p>B&#x2F;S缺点：</p><p>安全性不足。</p><p>客户端不能随心变化，受浏览器的影响。</p><p>作业：</p><p>抄写 B&#x2F;S架构 和 C&#x2F;S架构 。</p><p>抄写 URL 和 URI 。</p><h2 id="二、服务器相关的概念："><a href="#二、服务器相关的概念：" class="headerlink" title="二、服务器相关的概念："></a>二、服务器相关的概念：</h2><h3 id="1、什么是web服务器："><a href="#1、什么是web服务器：" class="headerlink" title="1、什么是web服务器："></a>1、什么是web服务器：</h3><p>web服务器：安装了web服务器程序的主机。保持web程序、运行web程序。</p><p>web服务器程序常用的有：Tomcat、IIS、Apache等。</p><h3 id="2、服务器的命名："><a href="#2、服务器的命名：" class="headerlink" title="2、服务器的命名："></a>2、服务器的命名：</h3><p>局域网：主机名（LAPTOP-RIPPDF2E）。—-192.168.1.103</p><p>互联网：按照互联网方式命名，即域名。</p><p>localhost—-127.0.0.1</p><h3 id="3、Tomcat目录结构：（重点）"><a href="#3、Tomcat目录结构：（重点）" class="headerlink" title="3、Tomcat目录结构：（重点）"></a>3、Tomcat目录结构：（重点）</h3><p><strong>bin</strong>：保存bat文件。shutdown.bat：关闭服务器程序；startup.bat：启动服务器程序。</p><p>​<a href="http://localhost:8080/index.jsp%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E3%80%82">http://localhost:8080/index.jsp给服务器发送请求。</a></p><p><strong>conf</strong>：保存配置文件。server.xml、web.xml 等。</p><p>lib：保存jar文件。tomcat程序对应的代码。</p><p><strong>webapps</strong>：保存web程序。</p><p><strong>work</strong>：jsp文件转换成的servlet文件。</p><p>logs：保存日志文件。</p><p>temp：保存临时问题。</p><h3 id="4、主目录：（重点）"><a href="#4、主目录：（重点）" class="headerlink" title="4、主目录：（重点）"></a>4、主目录：（重点）</h3><p>主目录：站点域名映射的目录。tomcat服务器的主目录为：webapps</p><p>主目录是站点访问者的起始点。</p><h3 id="5、虚拟目录：（重点）"><a href="#5、虚拟目录：（重点）" class="headerlink" title="5、虚拟目录：（重点）"></a>5、虚拟目录：（重点）</h3><p>定义虚拟目录：conf&#x2F;server.xml</p><p><a href="http://localhost:8080/virtualweb/">http://localhost:8080/virtualweb/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在&lt;Host&gt;标签中增加以下配置信息：</span><br><span class="line">&lt;Context </span><br><span class="line">path=&quot;/虚拟目录名&quot;</span><br><span class="line">docBase=&quot;虚拟目录映射的物理路径&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/Context&gt;</span><br><span class="line">如：</span><br><span class="line">&lt;Context </span><br><span class="line">path=&quot;/virtualweb&quot;</span><br><span class="line">docBase=&quot;C:\\vweb&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure><h3 id="6、更改服务器端口号：（重点）"><a href="#6、更改服务器端口号：（重点）" class="headerlink" title="6、更改服务器端口号：（重点）"></a>6、更改服务器端口号：（重点）</h3><p>在conf&#x2F;server.xml文件中修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8088&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class="line">               connectionTimeout=&quot;20000&quot;</span><br><span class="line">               redirectPort=&quot;8443&quot; /</span><br></pre></td></tr></table></figure><p>作业：</p><p>1、将html文件放在webapps目录下，测试主目录，</p><p>2、定义虚拟目录。</p><p>3、修改端口号。</p><h2 id="三、HTTP协议：（重点）"><a href="#三、HTTP协议：（重点）" class="headerlink" title="三、HTTP协议：（重点）"></a>三、HTTP协议：（重点）</h2><p>HTTP协议：HyperText Transfer Protocol  超文本传输协议。</p><p>HTTP协议使 请求 响应 式协议。</p><p>请求方式：get   post</p><p><strong>get：不安全的，传输的数据大小2KB，传输速度快。</strong></p><p><strong>post：安全的，传输的数据大，可以是几百兆，传输速度慢。</strong></p><p><strong>HTTP1.1 长连接，也称持久连接，是使用同一个 TCP 连接来发送和接收多个 HTTP 请求&#x2F;应答，而不是为每个新的请求&#x2F;应答打开新的 TCP 连接。</strong></p><p><strong>HTTP1.0 短连接，浏览器和服务器每进行一次 HTTP 操作，就会建立一次连接，但任务结束后就中断连接，不会像长连接那样保持连接。</strong></p><p>HTTPS(全称：Hypertext Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层（“Secure Sockets Layer” ，中文名为 “ 安全套接字协议层 ” ），HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 用于安全的HTTP数据传输。</p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="一、什么是servlet技术：（重点）"><a href="#一、什么是servlet技术：（重点）" class="headerlink" title="一、什么是servlet技术：（重点）"></a>一、什么是servlet技术：（重点）</h2><p><strong>servlet技术是用java语言开发的java程序。</strong></p><p><strong>使用 Servlet接口 或 实现了Servlet接口的类 开发程序。</strong></p><h2 id="二、servlet的功能："><a href="#二、servlet的功能：" class="headerlink" title="二、servlet的功能："></a>二、servlet的功能：</h2><p>创建并返回一个包含了基于客户端请求的动态内容的完整的HTML页面。</p><p>与其他的服务器资源（如：数据库）进行通信。</p><h2 id="三、serlet程序的调用方式：（重点）"><a href="#三、serlet程序的调用方式：（重点）" class="headerlink" title="三、serlet程序的调用方式：（重点）"></a>三、serlet程序的调用方式：（重点）</h2><p>超连接给服务器发送请求</p><p>表单给服务器发送请求</p><p>JS程序给服务器发送请求</p><p>浏览器地址栏输入url给服务器发送请求</p><h2 id="四、开发servlet程序："><a href="#四、开发servlet程序：" class="headerlink" title="四、开发servlet程序："></a>四、开发servlet程序：</h2><h3 id="1、用记事本开发，实现Servlet接口"><a href="#1、用记事本开发，实现Servlet接口" class="headerlink" title="1、用记事本开发，实现Servlet接口"></a>1、用记事本开发，实现Servlet接口</h3><h4 id="1-1、在webapps目录中创建目录和文件："><a href="#1-1、在webapps目录中创建目录和文件：" class="headerlink" title="1.1、在webapps目录中创建目录和文件："></a>1.1、在webapps目录中创建目录和文件：</h4><h4 id="1-2、配置CLASSPATH环境变量："><a href="#1-2、配置CLASSPATH环境变量：" class="headerlink" title="1.2、配置CLASSPATH环境变量："></a>1.2、配置CLASSPATH环境变量：</h4><h4 id="1-3、开发编译java程序，实现Servlet接口："><a href="#1-3、开发编译java程序，实现Servlet接口：" class="headerlink" title="1.3、开发编译java程序，实现Servlet接口："></a>1.3、开发编译java程序，实现Servlet接口：</h4><h4 id="1-4、配置web-xml文件："><a href="#1-4、配置web-xml文件：" class="headerlink" title="1.4、配置web.xml文件："></a>1.4、配置web.xml文件：</h4><h4 id="1-5、启动服务器："><a href="#1-5、启动服务器：" class="headerlink" title="1.5、启动服务器："></a>1.5、启动服务器：</h4><h4 id="1-6、给服务器发送请求："><a href="#1-6、给服务器发送请求：" class="headerlink" title="1.6、给服务器发送请求："></a>1.6、给服务器发送请求：</h4><h3 id="2、继承GenericServlet类"><a href="#2、继承GenericServlet类" class="headerlink" title="2、继承GenericServlet类"></a>2、继承GenericServlet类</h3><h3 id="3、使用idea开发，继承HttpServlet类（重点）"><a href="#3、使用idea开发，继承HttpServlet类（重点）" class="headerlink" title="3、使用idea开发，继承HttpServlet类（重点）"></a>3、使用idea开发，继承HttpServlet类（重点）</h3><p> Intellij IDEA2021.1创建Java web项目：<a href="https://blog.csdn.net/llplllll/article/details/116903198">https://blog.csdn.net/llplllll/article/details/116903198</a></p><h4 id="1-1、使用idea工具创建web项目："><a href="#1-1、使用idea工具创建web项目：" class="headerlink" title="1.1、使用idea工具创建web项目："></a>1.1、使用idea工具创建web项目：</h4><img src="C:\Users\wangchao\AppData\Roaming\Typora\typora-user-images\image-20220901193954284.png" alt="image-20220901193954284" style="zoom:50%;" /><h4 id="1-2、编写servlet程序："><a href="#1-2、编写servlet程序：" class="headerlink" title="1.2、编写servlet程序："></a>1.2、编写servlet程序：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ServletDemo01 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;servlet demo=======&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(&quot;/url&quot;)</span><br><span class="line">该注解的作用和在web.xml文件中配置&lt;servlet&gt;标签的作用基本相同，设置servlet类和url的映射关系。</span><br></pre></td></tr></table></figure><h4 id="1-3、配置web-xml文件："><a href="#1-3、配置web-xml文件：" class="headerlink" title="1.3、配置web.xml文件："></a>1.3、配置web.xml文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;aaa&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;cn.tedu.ServletDemo01&lt;/servlet-class&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;aaa&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/aaa&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置url-pattern：</span><br><span class="line">精确匹配：具体的路径名和文件名。如：/a/b/a.jsp</span><br><span class="line">目录匹配：指定路径。如：/a/*</span><br><span class="line">扩展匹配：*.后缀名。如：*.jsp</span><br></pre></td></tr></table></figure><h4 id="1-4、启动服务器："><a href="#1-4、启动服务器：" class="headerlink" title="1.4、启动服务器："></a>1.4、启动服务器：</h4><h4 id="1-5、发送请求："><a href="#1-5、发送请求：" class="headerlink" title="1.5、发送请求："></a>1.5、发送请求：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/lesson04_war_exploded/aaa</span><br></pre></td></tr></table></figure><p>作业：</p><p>1、抄写HTTP协议黑体部分。</p><p>2、用记事本开发servlet。</p><h2 id="五、servlet的生命周期：（重点）"><a href="#五、servlet的生命周期：（重点）" class="headerlink" title="五、servlet的生命周期：（重点）"></a>五、servlet的生命周期：（重点）</h2><p>1、第一次给servlet发送请求时，服务器端将改servlet类加载到内存，创建改类对象。</p><p>2、服务器端创建请求对象（request）、响应对象（response）</p><p>3、调用servlet中的init方法</p><p>4、调用servlet中的service方法。获取请求对象（request）的信息，处理请求，访问其他资源（数据库）、获取需要的信息，使用响应对象（response），将响应发送给客户端。</p><p>5、以后再给servlet发送请求时，服务器创建创建请求对象（request）、响应对象（response）对象，仍然激活此servlet对象，调用servlet中的service方法。</p><p>6、当服务器关闭，服务器会调用servlet中的destroy方法，销毁servlet对象。</p><h1 id="servlet常用类（重点）"><a href="#servlet常用类（重点）" class="headerlink" title="servlet常用类（重点）"></a>servlet常用类（重点）</h1><h2 id="一、HttpServletRequest："><a href="#一、HttpServletRequest：" class="headerlink" title="一、HttpServletRequest："></a>一、HttpServletRequest：</h2><h3 id="1、获取客户端发送的数据："><a href="#1、获取客户端发送的数据：" class="headerlink" title="1、获取客户端发送的数据："></a>1、获取客户端发送的数据：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getParameter(&quot;参数名&quot;)</span><br><span class="line">getParameterValues(&quot;参数名&quot;)</span><br></pre></td></tr></table></figure><h3 id="2、设置客户端发送的中文编码："><a href="#2、设置客户端发送的中文编码：" class="headerlink" title="2、设置客户端发送的中文编码："></a>2、设置客户端发送的中文编码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setCharacterEncoding(&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure><h3 id="3、页面的跳转—转发："><a href="#3、页面的跳转—转发：" class="headerlink" title="3、页面的跳转—转发："></a>3、页面的跳转—转发：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getRequestDispatcher(&quot;/fail.jsp&quot;).forward(request, response);</span><br><span class="line">注意：url中的第一个/表示上下文路径。</span><br></pre></td></tr></table></figure><h3 id="4、域对象："><a href="#4、域对象：" class="headerlink" title="4、域对象："></a>4、域对象：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setAttribute(String, Object);</span><br><span class="line">getAttribute(String);</span><br></pre></td></tr></table></figure><h2 id="二、HttpServletResponse："><a href="#二、HttpServletResponse：" class="headerlink" title="二、HttpServletResponse："></a>二、HttpServletResponse：</h2><h3 id="1、给客户端响应数据："><a href="#1、给客户端响应数据：" class="headerlink" title="1、给客户端响应数据："></a>1、给客户端响应数据：</h3><p>public java.io.PrintWriter <strong>getWriter</strong>() </p><p>print()   write()</p><h3 id="2、设置给客户端发送中文的编码："><a href="#2、设置给客户端发送中文的编码：" class="headerlink" title="2、设置给客户端发送中文的编码："></a>2、设置给客户端发送中文的编码：</h3><p>public void <strong>setContentType</strong>(“text&#x2F;html;charset&#x3D;UTF-8”) </p><h3 id="3、页面的跳转—-重定向："><a href="#3、页面的跳转—-重定向：" class="headerlink" title="3、页面的跳转—-重定向："></a>3、页面的跳转—-重定向：</h3><p>public void <strong>sendRedirect</strong>(String location) </p><p>第一个  &#x2F;  表示服务器名。</p><h3 id="4、转发和重定向的区别：（重点）"><a href="#4、转发和重定向的区别：（重点）" class="headerlink" title="4、转发和重定向的区别：（重点）"></a>4、转发和重定向的区别：（重点）</h3><p>4.1、转发是客户端给服务器端发送了一次请求；重定向是客户端给服务器端发送了两次请求；</p><p>4.2、转发时浏览器地址栏地址不变；重定向时浏览器地址栏地址改变；</p><p>4.3、转发设置url时，第一个 &#x2F; 表示上下文路径；重定向设置url时，第一个 &#x2F; 表示服务器名；</p><p>4.4、转发只能跳转到本网站中的页面；重定向可以跳转到任意页面；</p><p>4.5、转发效率高；重定向效率低；能使用转发就不使用重定向。</p><p>4.6、转发可以跳转到WEB-INF目录下的页面；重定向不可以跳转到WEB-INF目录下的页面；</p><p>作业：</p><p>抄写转发和重定向的区别。</p><p>测试response的功能。截图发群里。</p><h2 id="三、ServletConfig："><a href="#三、ServletConfig：" class="headerlink" title="三、ServletConfig："></a>三、ServletConfig：</h2><h3 id="1、获取ServletConfig对象："><a href="#1、获取ServletConfig对象：" class="headerlink" title="1、获取ServletConfig对象："></a>1、获取ServletConfig对象：</h3><p>HttpServlet类中提供以下方法：</p><p>public <a href="../javax.servlet.ServletConfig.html">ServletConfig</a> <strong>getServletConfig</strong>()</p><h3 id="2、获取标签中的标签中配置的数据："><a href="#2、获取标签中的标签中配置的数据：" class="headerlink" title="2、获取标签中的标签中配置的数据："></a>2、获取<servlet>标签中的<init-param>标签中配置的数据：</h3><p>public String <strong>getInitParameter</strong>(String name) </p><p>只能在该servlet中可以获取配置的数据。</p><h2 id="四、HttpSession：（重点）"><a href="#四、HttpSession：（重点）" class="headerlink" title="四、HttpSession：（重点）"></a>四、HttpSession：（重点）</h2><h3 id="1、获取HttpSession对象："><a href="#1、获取HttpSession对象：" class="headerlink" title="1、获取HttpSession对象："></a>1、获取HttpSession对象：</h3><p>HttpServletRequest对象中提供以下方法：</p><p>public <a href="../javax.servlet.http.HttpSession.html">HttpSession</a> <strong>getSession</strong>()</p><h3 id="2、域对象："><a href="#2、域对象：" class="headerlink" title="2、域对象："></a>2、域对象：</h3><p>setAttribute(String, Object);<br>getAttribute(String);</p><h2 id="五、ServletContext："><a href="#五、ServletContext：" class="headerlink" title="五、ServletContext："></a>五、ServletContext：</h2><h3 id="1、获取ServletContext对象："><a href="#1、获取ServletContext对象：" class="headerlink" title="1、获取ServletContext对象："></a>1、获取ServletContext对象：</h3><p>HttpServlet提供了以下方法：</p><p>public <a href="../javax.servlet.ServletContext.html">ServletContext</a>  <strong>getServletContext</strong>()</p><h3 id="2、获取标签中的标签中的数据"><a href="#2、获取标签中的标签中的数据" class="headerlink" title="2、获取标签中的标签中的数据"></a>2、获取<web-app>标签中的<context-param>标签中的数据</h3><p>public String <strong>getInitParameter</strong>(String name)</p><p>可以在所有的servlet中获取配置的数据。</p><h3 id="3、域对象："><a href="#3、域对象：" class="headerlink" title="3、域对象："></a>3、域对象：</h3><p>setAttribute(String, Object);<br>getAttribute(String);</p><p>作业：</p><p>抄写servlet的生命周期</p><p>测试上面讲的三个类</p><h2 id="六、request、session、servletContext三种域对象的区别：（重点）"><a href="#六、request、session、servletContext三种域对象的区别：（重点）" class="headerlink" title="六、request、session、servletContext三种域对象的区别：（重点）"></a>六、request、session、servletContext三种域对象的区别：（重点）</h2><p>生命期不同。</p><p>request：一次请求。给服务器端发送请求到给客户端响应数据。如：转发</p><p>session：一次会话。浏览器的打开到关闭。</p><p>servletContext：服务器的启动到关闭。</p><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="一、概念："><a href="#一、概念：" class="headerlink" title="一、概念："></a>一、概念：</h2><p>JSP：Java  Server  Page  java服务器页面</p><p>作用：方便的开发动态页面。</p><p>本质：一个JSP文件转换为servlet文件，执行servlet。</p><h2 id="二、JSP脚本元素：（重点）"><a href="#二、JSP脚本元素：（重点）" class="headerlink" title="二、JSP脚本元素：（重点）"></a>二、JSP脚本元素：（重点）</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、&lt;% java程序块 %&gt;"></a>1、&lt;% java程序块 %&gt;</h3><p>将java代码块中的程序添加到 _jspService 方法中。</p><h3 id="2、"><a href="#2、" class="headerlink" title="2、&lt;%!  java程序声明 %&gt;"></a>2、&lt;%!  java程序声明 %&gt;</h3><p>定义成员变量、成员方法。</p><h3 id="3、"><a href="#3、" class="headerlink" title="3、&lt;%&#x3D; java表达式 %&gt;"></a>3、&lt;%&#x3D; java表达式 %&gt;</h3><p>使用 java表达式 的结果 替换 该标签。</p><p>表达式末尾不能有分号。</p><p>在html标签中使用。</p><p>本质：out.print( 表达式 );</p><p>脚本元素中不能出现标签。</p><p>print(int)：将int数值转换为字符串，将对应的字符串响应给客户端。如：print(65)，页面显示65</p><p>write(int)：将int当作编码，将该编码对应的字符响应给客户端。如：write(65)，页面显示A</p><p>作业：</p><p>在&lt;%%&gt;中打印菱形。</p><p>在&lt;%!%&gt;中定义排序方法。在&lt;%%&gt;中调用。</p><h2 id="三、JSP指令元素："><a href="#三、JSP指令元素：" class="headerlink" title="三、JSP指令元素："></a>三、JSP指令元素：</h2><h3 id="1、概念："><a href="#1、概念：" class="headerlink" title="1、概念："></a>1、概念：</h3><p>指令元素是提供给服务器，指明如何编译生成servlet程序。</p><p>语法格式：&lt;%@ 指令名  属性&#x3D;“值”  属性&#x3D;“值” …… %&gt;</p><p>指令名有：page   include   taglib</p><h3 id="2、page：（重点）"><a href="#2、page：（重点）" class="headerlink" title="2、page：（重点）"></a>2、page：（重点）</h3><p>language：属性值为编程语言名，缺点嵌入程序的语言。如：java</p><p>import：属性值为类的包名，导入包中的类。如：java.util.HashSet</p><p>session：属性值为boolean，设置session对象是否可以使用。如：true</p><p>contentType：属性值为编码名，设置页面中中文的编码。如：text&#x2F;html;charset&#x3D;UTF-8</p><p>error Page：属性值为错误页面的url，设置页面出500错误 转发 的页面。</p><p>其他错误跳转的页面需要配置web.xml文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class="line">    &lt;!--转发--&gt;</span><br><span class="line">    &lt;location&gt;/404.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br><span class="line">&lt;error-page&gt;</span><br><span class="line">    &lt;error-code&gt;500&lt;/error-code&gt;</span><br><span class="line">    &lt;location&gt;/ok.jsp&lt;/location&gt;</span><br><span class="line">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure><p>isErrorPage：属性值是boolean值，确定该页面是否是错误页面。如果是错误页面，则生成servlet时会创建exception对象。</p><p>pageEncoding：属性值是编码名，确定客户端发送的中文的编码。</p><p>auto Flush：属性值是boolean值，确定是否自动刷新缓存区的内容。</p><p>page指令元素可以有多个。</p><p>import属性可以设置多次值。其他属性只能设置一次值。</p><h3 id="3、include：（重点）"><a href="#3、include：（重点）" class="headerlink" title="3、include：（重点）"></a>3、include：（重点）</h3><p>功能类似于 iframe 标签。将某个页面包含到本页面中。</p><p>file：指定需要包含进来的页面文件名。</p><p>注意：</p><p>子页面中设置的样式会影响到当前页面的标签。</p><p>include指令元素本质是将子页面中的代码添加到了当前页面，生成一个servelt文件。</p><h3 id="4、taglib："><a href="#4、taglib：" class="headerlink" title="4、taglib："></a>4、taglib：</h3><p>将系统提供的标准标签库导入到当前页面，则在当前页面中可以使用。</p><p>在 JSTL 章节</p><h2 id="四、JSP动作元素："><a href="#四、JSP动作元素：" class="headerlink" title="四、JSP动作元素："></a>四、JSP动作元素：</h2><h3 id="1、jsp-forward：（重点）"><a href="#1、jsp-forward：（重点）" class="headerlink" title="1、jsp:forward：（重点）"></a>1、<a href="jsp:forward">jsp:forward</a>：（重点）</h3><p>进行页面的跳转—转发</p><p>page属性：跳转的url</p><h3 id="2、jsp-param"><a href="#2、jsp-param" class="headerlink" title="2、jsp:param"></a>2、<a href="jsp:param">jsp:param</a></h3><p>通过该标签设置参数，本质是将参数添加的了 request 域对象中。</p><p>在  <a href="jsp:forward">jsp:forward</a>  和  <a href="jsp:include">jsp:include</a> 中使用。</p><h3 id="3、jsp-include：（重点）"><a href="#3、jsp-include：（重点）" class="headerlink" title="3、jsp:include：（重点）"></a>3、<a href="jsp:include">jsp:include</a>：（重点）</h3><p>作用：将一个页面包含到当前页面。</p><p>注意：</p><p>子页面中设置的样式会影响到当前页面的标签。</p><p>include动作元素本质是每个jsp文件都会生成对应的servlet文件，当执行动作元素时，才会执行子页面对应的servlet程序。</p><p>page属性：设置包含的页面。</p><h3 id="4、jsp-useBean"><a href="#4、jsp-useBean" class="headerlink" title="4、jsp:useBean"></a>4、<a href="jsp:useBean">jsp:useBean</a></h3><p>创建指定的类对象，并将类对象添加到指定的域对象中。</p><p>指定类中一定要有无参构造方法。</p><p>id属性：添加到域对象中时，设置的名字。</p><p>class属性：创建指定的类对象。</p><p>scope属性：添加到指定的域对象中。</p><h3 id="5、jsp-setProperty"><a href="#5、jsp-setProperty" class="headerlink" title="5、jsp:setProperty"></a>5、<a href="jsp:setProperty">jsp:setProperty</a></h3><p>给指定的对象设置属性值。</p><p>name属性：指定设置属性值的对象。</p><p>property属性：指定属性名。</p><p>value属性：指定属性值。</p><h3 id="6、jsp-getProperty"><a href="#6、jsp-getProperty" class="headerlink" title="6、jsp:getProperty"></a>6、<a href="jsp:getProperty">jsp:getProperty</a></h3><p>从指定的对象中指定的属性获取属性值，将该值发送给客户端。类似于&lt;%&#x3D;%&gt;</p><p>name属性：指定设置属性值的对象。</p><p>property属性：指定属性名。</p><h1 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h1><h2 id="一、概念：（重点）"><a href="#一、概念：（重点）" class="headerlink" title="一、概念：（重点）"></a>一、概念：（重点）</h2><p>request   response   out   application   session   exception   page   pageContext   config </p><p>九大内置对象可以直接在jsp文件的 &lt;%%&gt; 或 &lt;%&#x3D;%&gt; 中的java程序中使用。</p><p>本质是 _jspService 中定义的对象。</p><h2 id="二、request（重点）"><a href="#二、request（重点）" class="headerlink" title="二、request（重点）"></a>二、request（重点）</h2><p>内置对象的类型：javax.servlet.http.HttpServletRequest</p><h3 id="1、获取客户端发送的参数："><a href="#1、获取客户端发送的参数：" class="headerlink" title="1、获取客户端发送的参数："></a>1、获取客户端发送的参数：</h3><h3 id="2、设置中文编码："><a href="#2、设置中文编码：" class="headerlink" title="2、设置中文编码："></a>2、设置中文编码：</h3><h3 id="3、页面的转发："><a href="#3、页面的转发：" class="headerlink" title="3、页面的转发："></a>3、页面的转发：</h3><h3 id="4、域对象：-1"><a href="#4、域对象：-1" class="headerlink" title="4、域对象："></a>4、域对象：</h3><h3 id="5、获取客户端发送请求的方式："><a href="#5、获取客户端发送请求的方式：" class="headerlink" title="5、获取客户端发送请求的方式："></a>5、获取客户端发送请求的方式：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getMethod()</span><br></pre></td></tr></table></figure><h3 id="6、获取请求头中的数据："><a href="#6、获取请求头中的数据：" class="headerlink" title="6、获取请求头中的数据："></a>6、获取请求头中的数据：</h3><p>​general：</p><p>​Request URL: <a href="http://127.0.0.1:8080/lesson/request.jsp">http://127.0.0.1:8080/lesson/request.jsp</a> 请求的url</p><p>​Request Method: GET请求方式</p><p>​Status Code: 200 请求状态</p><p>​Remote Address: 127.0.0.1:8080客户端的IP地址和端口</p><p>​response head：响应头，服务器端给客户端发送的数据</p><p>​Content-Length: 106相应给客户端的数据字节数</p><p>​Content-Type: text&#x2F;html;charset&#x3D;UTF-8中文编码</p><p>​Date: Wed, 21 Sep 2022 00:33:13 GMT 响应时间</p><p>​request  head：请求头，客户端给服务器端发送的数据</p><pre><code>    Accept:text/html,application/xhtml+xml   客户端可以接收html格式的文本</code></pre><p>​Accept-Encoding: gzip, deflate, br客户端可以接收压缩格式的数据</p><p>​Accept-Language: zh-CN,zh;q&#x3D;0.9客户端可以接收中文</p><p>​Connection: keep-alive客户端是长连接</p><p>​Host: 127.0.0.1:8080客户端给服务器端的IP地址和端口号发送请求</p><p>​User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64)  客户端的浏览器内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">while (headerNames.hasMoreElements())&#123;</span><br><span class="line">    String name = headerNames.nextElement();</span><br><span class="line">    String header = request.getHeader(name);</span><br><span class="line">    System.out.println(name+&quot;:&quot;+header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、获取上下文路径："><a href="#7、获取上下文路径：" class="headerlink" title="7、获取上下文路径："></a>7、获取上下文路径：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getContextPath();</span><br></pre></td></tr></table></figure><h3 id="8、获取客户端的IP地址和端口号："><a href="#8、获取客户端的IP地址和端口号：" class="headerlink" title="8、获取客户端的IP地址和端口号："></a>8、获取客户端的IP地址和端口号：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.getRemoteAddr();</span><br><span class="line">request.getRemotePort();</span><br></pre></td></tr></table></figure><h3 id="9、发送请求的URL："><a href="#9、发送请求的URL：" class="headerlink" title="9、发送请求的URL："></a>9、发送请求的URL：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestURL();</span><br></pre></td></tr></table></figure><h3 id="10、获取客户端发送的cookie对象：（重点）"><a href="#10、获取客户端发送的cookie对象：（重点）" class="headerlink" title="10、获取客户端发送的cookie对象：（重点）"></a>10、获取客户端发送的cookie对象：（重点）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line">for (Cookie c: cookies)&#123;</span><br><span class="line">    String name = c.getName();</span><br><span class="line">    String value = c.getValue();</span><br><span class="line">    int maxAge = c.getMaxAge();</span><br><span class="line">    String path = c.getPath();</span><br><span class="line">    System.out.println(name+&quot; &quot;+value+&quot; &quot;+maxAge+&quot; &quot;+path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、response（重点）"><a href="#三、response（重点）" class="headerlink" title="三、response（重点）"></a>三、response（重点）</h2><p>功能：将服务器端的数据响应给客户端。影响 响应头 中的数据。</p><p>类型：HttpServletResponse</p><h3 id="1、给客户端响应完整页面。"><a href="#1、给客户端响应完整页面。" class="headerlink" title="1、给客户端响应完整页面。"></a>1、给客户端响应完整页面。</h3><h3 id="2、设置响应页面中的中文编码格式。"><a href="#2、设置响应页面中的中文编码格式。" class="headerlink" title="2、设置响应页面中的中文编码格式。"></a>2、设置响应页面中的中文编码格式。</h3><h3 id="3、进行页面的跳转—-重定向"><a href="#3、进行页面的跳转—-重定向" class="headerlink" title="3、进行页面的跳转—-重定向"></a>3、进行页面的跳转—-重定向</h3><h3 id="4、设置页面自动刷新："><a href="#4、设置页面自动刷新：" class="headerlink" title="4、设置页面自动刷新："></a>4、设置页面自动刷新：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;refresh&quot;, &quot;4&quot;);     //4s</span><br></pre></td></tr></table></figure><h3 id="5、设置页面定时跳转（重定向）到其他页面："><a href="#5、设置页面定时跳转（重定向）到其他页面：" class="headerlink" title="5、设置页面定时跳转（重定向）到其他页面："></a>5、设置页面定时跳转（重定向）到其他页面：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;refresh&quot;, &quot;4;URL=/lesson/ok.jsp&quot;);</span><br></pre></td></tr></table></figure><h3 id="6、添加cookie对象（重点）"><a href="#6、添加cookie对象（重点）" class="headerlink" title="6、添加cookie对象（重点）"></a>6、添加cookie对象（重点）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//cookie：是类对象，保存一个键值对。有一定的生命期。以文件的形式保存在客户端。</span><br><span class="line">//客户端给服务器端发送请求的时候，客户端会将保存的cookie发送给服务器端。</span><br><span class="line">//清除cookie：cookie对象.setMaxAge(0);</span><br><span class="line">Cookie c1 = new Cookie(&quot;user&quot;, &quot;wang&quot;);</span><br><span class="line">//设置cookie的生命期，单位是秒</span><br><span class="line">c1.setMaxAge(20);</span><br><span class="line">//设置cookie的路径，固定为 /</span><br><span class="line">c1.setPath(&quot;/&quot;);</span><br><span class="line">//将cookie对象添加到response中，响应给客户端</span><br><span class="line">response.addCookie(c1);</span><br></pre></td></tr></table></figure><p><strong>案例：30天免登录。登录成功后30天内不需要再次登录，直接进入到登录成功页面。选择退出后，进入退出成功页面，再次请求登录页面，则需要进行登录操作。（重点）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Cookie[] cs = request.getCookies();</span><br><span class="line">        if (cs != null) &#123;</span><br><span class="line">            for (Cookie c : cs) &#123;</span><br><span class="line">                String name = c.getName();</span><br><span class="line">                String value = c.getValue();</span><br><span class="line">                if (&quot;wang&quot;.equals(name) &amp;&amp; &quot;123&quot;.equals(value)) &#123;</span><br><span class="line">                    request.getRequestDispatcher(&quot;/ok.jsp&quot;).forward(request, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;form action=&quot;/lesson/login&quot;&gt;</span><br><span class="line">        用户名：&lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br&gt;</span><br><span class="line">        密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;ten&quot; value=&quot;30&quot;&gt;30天免登录&lt;br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(value = &quot;/login&quot;)</span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String user = request.getParameter(&quot;user&quot;);</span><br><span class="line">        String pwd = request.getParameter(&quot;pwd&quot;);</span><br><span class="line">        if (&quot;wang&quot;.equals(user) &amp;&amp; &quot;123&quot;.equals(pwd))&#123;</span><br><span class="line">            String ten = request.getParameter(&quot;ten&quot;);</span><br><span class="line">            if (ten == null)&#123;</span><br><span class="line">                request.getRequestDispatcher(&quot;/ok.jsp&quot;).forward(request, response);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //如果用户名密码正确，同时十天免登录勾选</span><br><span class="line">                Cookie c = new Cookie(user, pwd);</span><br><span class="line">                c.setMaxAge(200);</span><br><span class="line">                c.setPath(&quot;/&quot;);</span><br><span class="line">                response.addCookie(c);</span><br><span class="line">                request.getRequestDispatcher(&quot;/ok.jsp&quot;).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            request.getRequestDispatcher(&quot;/fail.jsp&quot;).forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;退出页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Cookie c = new Cookie(&quot;wang&quot;, &quot;123&quot;);</span><br><span class="line">        c.setMaxAge(0);</span><br><span class="line">        c.setPath(&quot;/&quot;);</span><br><span class="line">        response.addCookie(c);</span><br><span class="line">    %&gt;</span><br><span class="line">    成功退出页面========================</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="四、session（重点）"><a href="#四、session（重点）" class="headerlink" title="四、session（重点）"></a>四、session（重点）</h2><p>类型：HttpSession</p><p>开关：&lt;%@ page session&#x3D;”true” %&gt;</p><h3 id="1、域对象，一次会话。"><a href="#1、域对象，一次会话。" class="headerlink" title="1、域对象，一次会话。"></a>1、域对象，一次会话。</h3><h3 id="2、设置会话有效时间：（重点）"><a href="#2、设置会话有效时间：（重点）" class="headerlink" title="2、设置会话有效时间：（重点）"></a>2、设置会话有效时间：（重点）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在conf/web.xml文件中配置了session的生命期为 30 分钟。</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;30&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><p>public void <strong>setMaxInactiveInterval</strong>(int interval)</p><p>指定在 servlet 容器使此会话失效之前客户端请求之间的时间间隔，以秒为单位。负数时间指示会话永远不会超时。</p><h3 id="3、获取session对象的ID值："><a href="#3、获取session对象的ID值：" class="headerlink" title="3、获取session对象的ID值："></a>3、获取session对象的ID值：</h3><p>session的id值的意义：每个session对象都有一个ID值，该session对象的ID值保存在cookie中。客户端给服务器端发送请求时会将该cookie对象发送过去，服务器端根据cookie对象中的JSESSIONID对应的值确定使用哪个session对象。</p><p>获取session的id值：getId()</p><h3 id="4、手动销毁session对象：（重点）"><a href="#4、手动销毁session对象：（重点）" class="headerlink" title="4、手动销毁session对象：（重点）"></a>4、手动销毁session对象：（重点）</h3><p>销毁session对象：invalidate()</p><p>注意：销毁session对象后，就不能再使用session对象，否则，报异常。</p><h3 id="5、案例"><a href="#5、案例" class="headerlink" title="5、案例"></a>5、案例</h3><p>登录成功页面显示用户名；</p><p>给某个页面发送请求，在该页面中判断是否登录成功，如果没有成功，则跳转到登录页面；</p><h2 id="五、application（重点）"><a href="#五、application（重点）" class="headerlink" title="五、application（重点）"></a>五、application（重点）</h2><p>类型：ServletContext</p><h3 id="1、域对象："><a href="#1、域对象：" class="headerlink" title="1、域对象："></a>1、域对象：</h3><p>生命期为服务器的启动到关闭。</p><h3 id="2、获取web-xml文件中标签中配置的数据："><a href="#2、获取web-xml文件中标签中配置的数据：" class="headerlink" title="2、获取web.xml文件中标签中配置的数据："></a>2、获取web.xml文件中<context-param>标签中配置的数据：</h3><h3 id="3、获取文件在服务器中的绝对路径："><a href="#3、获取文件在服务器中的绝对路径：" class="headerlink" title="3、获取文件在服务器中的绝对路径："></a>3、获取文件在服务器中的绝对路径：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getRealPath(&quot;/index.jsp&quot;)</span><br></pre></td></tr></table></figure><h3 id="4、案例："><a href="#4、案例：" class="headerlink" title="4、案例："></a>4、案例：</h3><p>在页面中显示该页面被所有的客户端一共访问的次数。把application当作一个计数器使用。</p><h2 id="六、config"><a href="#六、config" class="headerlink" title="六、config"></a>六、config</h2><p>类型：ServletConfig</p><h3 id="1、获取标签中的标签中配置的数据："><a href="#1、获取标签中的标签中配置的数据：" class="headerlink" title="1、获取标签中的标签中配置的数据："></a>1、获取<servlet>标签中的<init-param>标签中配置的数据：</h3><p>只能给<url-pattern>标签中配置的url发送请求时，才能获取到配置的数据。</p><p>直接给jsp文件发送请求，则不能获取到配置的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;conf&lt;/servlet-name&gt;</span><br><span class="line">    &lt;!-- 文件路径前一定要加 / , 该 / 表示web目录--&gt;</span><br><span class="line">    &lt;jsp-file&gt;/conf.jsp&lt;/jsp-file&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">        &lt;param-name&gt;charset&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;utf-8&lt;/param-value&gt;</span><br><span class="line">    &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;conf&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/config&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、重定向到WEB-INF目录下的jsp文件"><a href="#2、重定向到WEB-INF目录下的jsp文件" class="headerlink" title="2、重定向到WEB-INF目录下的jsp文件"></a>2、重定向到WEB-INF目录下的jsp文件</h3><p>可以转发到WEB-INF目录下的jsp文件；不能直接重定向到WEB-INF目录下的jsp文件；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;ok&lt;/servlet-name&gt;</span><br><span class="line">       &lt;!-- 文件路径前一定要加 / , 该 / 表示web目录--&gt;</span><br><span class="line">       &lt;jsp-file&gt;/WEB-INF/ok.jsp&lt;/jsp-file&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;ok&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/ok&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h2 id="七、out"><a href="#七、out" class="headerlink" title="七、out"></a>七、out</h2><p>类型：JspWriter</p><h3 id="1、将页面相应给客户端："><a href="#1、将页面相应给客户端：" class="headerlink" title="1、将页面相应给客户端："></a>1、将页面相应给客户端：</h3><p>public void write(String str)</p><h3 id="2、将缓冲区的数据发送给客户端："><a href="#2、将缓冲区的数据发送给客户端：" class="headerlink" title="2、将缓冲区的数据发送给客户端："></a>2、将缓冲区的数据发送给客户端：</h3><p>public void <strong>flush</strong>() </p><h3 id="3、判断是否设置了自动刷新缓冲区"><a href="#3、判断是否设置了自动刷新缓冲区" class="headerlink" title="3、判断是否设置了自动刷新缓冲区"></a>3、判断是否设置了自动刷新缓冲区</h3><p>public boolean <strong>isAutoFlush</strong>()</p><h3 id="4、获取缓冲区的大小（字节）："><a href="#4、获取缓冲区的大小（字节）：" class="headerlink" title="4、获取缓冲区的大小（字节）："></a>4、获取缓冲区的大小（字节）：</h3><p>public int <strong>getBufferSize</strong>() </p><h2 id="八、exception"><a href="#八、exception" class="headerlink" title="八、exception"></a>八、exception</h2><p>类型：Throwable</p><p>开关：&lt;%@ page isErrorPage&#x3D;”true” %&gt;</p><h3 id="1、获取上个页面从错误信息"><a href="#1、获取上个页面从错误信息" class="headerlink" title="1、获取上个页面从错误信息"></a>1、获取上个页面从错误信息</h3><p> public String getMessage(); </p><h2 id="九、page"><a href="#九、page" class="headerlink" title="九、page"></a>九、page</h2><p>page &#x3D; this;</p><h2 id="十、pageContext（重要）"><a href="#十、pageContext（重要）" class="headerlink" title="十、pageContext（重要）"></a>十、pageContext（重要）</h2><p>类型：PageContext</p><h3 id="1、域对象：-1"><a href="#1、域对象：-1" class="headerlink" title="1、域对象："></a>1、域对象：</h3><p>生命期为当前页面。</p><p>void <strong>setAttribute</strong>(String name, Object value)</p><h3 id="2、域对象：-1"><a href="#2、域对象：-1" class="headerlink" title="2、域对象："></a>2、域对象：</h3><p>public void <strong>setAttribute</strong>(String name, Object value,  int scope) </p><p>第三个参数的取值：PAGE_SCOPE  REQUEST_SCOPE  SESSION_SCOPE  APPLICATION_SCOPE</p><p>3、获取其他内置对象：</p><p>public <a href="../javax.servlet.ServletRequest.html">ServletRequest</a>  <strong>getRequest</strong>()</p><h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="一、文件下载："><a href="#一、文件下载：" class="headerlink" title="一、文件下载："></a>一、文件下载：</h2><p>1、获取客户端发送文件名</p><p>2、处理文件名中的中文乱码问题</p><p>3、给response设置响应头。</p><p>4、根据下载的文件创建输入流。</p><p>5、根据response创建输出流。</p><p>6、根据输入流从文件读取数据，将读取的 数据根据输出流发送给客户端。</p><p>7、关闭流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    String path;</span><br><span class="line">    path = request.getContextPath();</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;a href=&quot;&lt;%=path%&gt;/down?file=apache-tomcat-8.5.33.zip&quot;&gt;apache-tomcat-8.5.33.zip&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;&lt;%=path%&gt;/down?file=Typora文档工具(无需破解).rar&quot;&gt;Typora文档工具(无需破解).rar&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(value = &quot;/down&quot;)</span><br><span class="line">public class DownloadServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">//        1、获取客户端发送文件名</span><br><span class="line">        request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        String file = request.getParameter(&quot;file&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//        2、处理文件名中的中文乱码问题</span><br><span class="line">        response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line"></span><br><span class="line">//        3、给response设置响应头。</span><br><span class="line">        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot;</span><br><span class="line">                + URLEncoder.encode(file, &quot;utf-8&quot;));</span><br><span class="line">        System.out.println(file);</span><br><span class="line"></span><br><span class="line">//        4、根据下载的文件创建输入流。</span><br><span class="line">        FileInputStream in = new FileInputStream(&quot;D:\\work\\榆林学院\\20级资料\\资料\\&quot; + file);</span><br><span class="line"></span><br><span class="line">//        5、根据response创建输出流。</span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">//        6、根据输入流从文件读取数据，将读取的 数据根据输出流发送给客户端。</span><br><span class="line">        byte[] b = new byte[1024];</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            int len = in.read(b);</span><br><span class="line">            if (len &lt;= 0)</span><br><span class="line">                break;</span><br><span class="line">            out.write(b, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//        7、关闭流</span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、文件上传："><a href="#二、文件上传：" class="headerlink" title="二、文件上传："></a>二、文件上传：</h2><p>配置环境：添加两个jar文件。</p><h3 id="1、前端：（重要）"><a href="#1、前端：（重要）" class="headerlink" title="1、前端：（重要）"></a>1、前端：（重要）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;&lt;%=request.getContextPath()%&gt;/upload&quot;</span><br><span class="line">          method=&quot;post&quot;</span><br><span class="line">          enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;file&quot; name=&quot;f1&quot;&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=&quot;file&quot; name=&quot;f2&quot;&gt;&lt;br&gt;</span><br><span class="line">      &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2、后端："><a href="#2、后端：" class="headerlink" title="2、后端："></a>2、后端：</h3><p>检查是否为多媒体上传</p><p>创建磁盘工厂</p><p>创建文件上传工具</p><p>接收request中表单的所有内容</p><p>遍历接收的表单内容，将多媒体数据保存到文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(value = &quot;/upload&quot;)</span><br><span class="line">public class UploadServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">//        设置编码</span><br><span class="line">        request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">//        检查是否为多媒体上传</span><br><span class="line">        if (!ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            out.write(&quot;Error：表单中没有多媒体内容，必须包含：enctype=multipart/form-data&quot;);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">//        创建磁盘工厂</span><br><span class="line">        DiskFileItemFactory factory = new DiskFileItemFactory();</span><br><span class="line">//        创建文件上传工具</span><br><span class="line">        ServletFileUpload upload = new ServletFileUpload(factory);</span><br><span class="line">//        接收request中表单的所有内容</span><br><span class="line">        List&lt;FileItem&gt; list = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            list = upload.parseRequest(request);</span><br><span class="line">        &#125; catch (FileUploadException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//        遍历接收的表单内容，将多媒体数据保存到文件中</span><br><span class="line">        for (FileItem item: list)&#123;</span><br><span class="line">            //判断该表单项是否为file类型的表单元素</span><br><span class="line">            if (!item.isFormField())&#123;</span><br><span class="line">                String name = item.getName();</span><br><span class="line">                File file = new File(&quot;D:\\work\\榆林学院\\20级资料\\JavaWeb基础\\&quot; + name);</span><br><span class="line">                try &#123;</span><br><span class="line">                    item.write(file);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EL表达式语言"><a href="#EL表达式语言" class="headerlink" title="EL表达式语言"></a>EL表达式语言</h1><h2 id="一、概念：-1"><a href="#一、概念：-1" class="headerlink" title="一、概念："></a>一、概念：</h2><h3 id="1、EL："><a href="#1、EL：" class="headerlink" title="1、EL："></a>1、EL：</h3><p>Expression  Language 表达式语言</p><h3 id="2、功能："><a href="#2、功能：" class="headerlink" title="2、功能："></a>2、功能：</h3><p>更  方便  的从某些内置对象中  读取  数据。如：request、session、application、pageContext等</p><h3 id="3、开关："><a href="#3、开关：" class="headerlink" title="3、开关："></a>3、开关：</h3><p>&lt;%@ page isELIgnored&#x3D;”false” %&gt;</p><h3 id="4、语法：（重点）"><a href="#4、语法：（重点）" class="headerlink" title="4、语法：（重点）"></a>4、语法：（重点）</h3><p>${表达式} </p><p>作用等同于 &lt;%&#x3D;表达式%&gt;</p><p>操作数可以是数值、字符串、boolean数据</p><h2 id="二、读取数据"><a href="#二、读取数据" class="headerlink" title="二、读取数据"></a>二、读取数据</h2><p>隐式对象.name 或  隐式对象[“name”]</p><p>如果name名字中有特殊符号，如 - . 等，则需要使用第二中格式。</p><p>如：请求头、参数、cookie、attribute数据等。</p><p>bean对象：隐式对象.name.成员变量名</p><p>数组：隐式对象.name[下标]</p><p>list集合：隐式对象.name[下标]</p><p>map集合：隐式对象.name.key  或  隐式对象.name[“key”]</p><h2 id="三、运算符："><a href="#三、运算符：" class="headerlink" title="三、运算符："></a>三、运算符：</h2><h3 id="1、算术运算符："><a href="#1、算术运算符：" class="headerlink" title="1、算术运算符："></a>1、算术运算符：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ - * / % div  mod</span><br></pre></td></tr></table></figure><h3 id="2、逻辑运算符："><a href="#2、逻辑运算符：" class="headerlink" title="2、逻辑运算符："></a>2、逻辑运算符：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  ||  !   and   or   not</span><br></pre></td></tr></table></figure><h3 id="3、关系运算符："><a href="#3、关系运算符：" class="headerlink" title="3、关系运算符："></a>3、关系运算符：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &lt; &gt;= &lt;=  != ==eq  ne  lt  le  gt  ge</span><br></pre></td></tr></table></figure><h3 id="4、条件运算符："><a href="#4、条件运算符：" class="headerlink" title="4、条件运算符："></a>4、条件运算符：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?  :</span><br></pre></td></tr></table></figure><h3 id="5、空运算符：（重点）"><a href="#5、空运算符：（重点）" class="headerlink" title="5、空运算符：（重点）"></a>5、空运算符：（重点）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty 表达式</span><br><span class="line">表达式的值为 null  或  &quot;&quot;  ，则结果为true</span><br></pre></td></tr></table></figure><h2 id="四、隐式对象：（重点）"><a href="#四、隐式对象：（重点）" class="headerlink" title="四、隐式对象：（重点）"></a>四、隐式对象：（重点）</h2><p>语法：${隐式对象.名字}</p><h3 id="1、pageScope、requestScope、sessionScope、applicationScope"><a href="#1、pageScope、requestScope、sessionScope、applicationScope" class="headerlink" title="1、pageScope、requestScope、sessionScope、applicationScope"></a>1、pageScope、requestScope、sessionScope、applicationScope</h3><p>${隐式对象.属性名} 等同于 域对象名.getAttribue(属性名);</p><p>${属性名} 按照作用域从小到大的域对象中查找该属性名对应的值。</p><h3 id="2、param"><a href="#2、param" class="headerlink" title="2、param"></a>2、param</h3><p>${param.参数名} 等同于 request.getParameter(“参数名”);</p><h3 id="3、paramValues"><a href="#3、paramValues" class="headerlink" title="3、paramValues"></a>3、paramValues</h3><p>${paramValues.参数名} 等同于 request.getParameterValues(“参数名”)</p><h3 id="4、header"><a href="#4、header" class="headerlink" title="4、header"></a>4、header</h3><p>${header.名字}  等同于  request.getHeader(“名字”)</p><h3 id="5、cookie"><a href="#5、cookie" class="headerlink" title="5、cookie"></a>5、cookie</h3><p>${cookie.名字} 功能：从request中接收到的cookie中查找名字叫 该名字 的Cookie对象。</p><h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h1><h2 id="一、概念：-2"><a href="#一、概念：-2" class="headerlink" title="一、概念："></a>一、概念：</h2><h3 id="1、概念：-1"><a href="#1、概念：-1" class="headerlink" title="1、概念："></a>1、概念：</h3><p>JSTL：JSP  Standard   Tag   Library   JSP标准标签库</p><p><strong>EL封装了数据访问的功能。</strong></p><p><strong>JSTL逻辑控制（分支、循环）、数据格式的功能。</strong></p><h3 id="2、好处："><a href="#2、好处：" class="headerlink" title="2、好处："></a>2、好处：</h3><p><strong>简化</strong> 了JSP和web应用程序的开发。</p><p>JSTL还引入了EL。</p><p>JSTL为条件处理、迭代、国际化、数据库访问、可扩展标记语言（xml）处理提供了支持。</p><h3 id="3、配置JSTL："><a href="#3、配置JSTL：" class="headerlink" title="3、配置JSTL："></a>3、配置JSTL：</h3><p>一个标签对应了若干个类。</p><p>导入jar文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br></pre></td></tr></table></figure><h2 id="二、JSTL常用标签："><a href="#二、JSTL常用标签：" class="headerlink" title="二、JSTL常用标签："></a>二、JSTL常用标签：</h2><h3 id="1、c-out（重点）"><a href="#1、c-out（重点）" class="headerlink" title="1、c:out（重点）"></a>1、c:out（重点）</h3><p>使用value属性值替换该标签。类似于&lt;%&#x3D;表达式%&gt;   ${表达式}</p><p>value：该属性值替换该标签。属性值可以是EL表达式。</p><p>default：如果value的EL表达式为空，则用defalt属性值替换该标签。</p><p>escapeXml：属性值为boolean类型。如果是true，则将value属性值种的标签当作普通字符显示；</p><h3 id="2、c-set"><a href="#2、c-set" class="headerlink" title="2、c:set"></a>2、c:set</h3><p>添加修改域对象中的数据。</p><p>添加：</p><p>var：设置需要保存的信息的属性名。</p><p>value：设置需要保存的信息。可以是EL表达式或常量。</p><p>scope：设置保存信息的范围。page   request   session   application</p><p>修改域对象中保存的对象的属性值：</p><p>target：设置需要修改的域对象中的实例名。格式：${实例名}</p><p>property：设置需要修改的对象的成员变量名。</p><p>value：设置需要修改的值。</p><h3 id="3、c-if（重点）"><a href="#3、c-if（重点）" class="headerlink" title="3、c:if（重点）"></a>3、c:if（重点）</h3><p>test：设置条件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if test=&quot;表达式&quot;&gt;</span><br><span class="line">脚本元素</span><br><span class="line">HTML标签</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h3 id="4、c-choose"><a href="#4、c-choose" class="headerlink" title="4、c:choose"></a>4、c:choose</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when test=&quot;表达式&quot;&gt;</span><br><span class="line">脚本元素</span><br><span class="line">HTML标签</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=&quot;表达式&quot;&gt;</span><br><span class="line">脚本元素</span><br><span class="line">HTML标签</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test=&quot;表达式&quot;&gt;</span><br><span class="line">脚本元素</span><br><span class="line">HTML标签</span><br><span class="line">&lt;/c:when&gt;</span><br><span class="line">......</span><br><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">脚本元素</span><br><span class="line">HTML标签</span><br><span class="line">&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>使用 c:when 和 c:otherwise 可以实现if-else的功能。</p><h3 id="5、c-foreach（重点）"><a href="#5、c-foreach（重点）" class="headerlink" title="5、c:foreach（重点）"></a>5、c:foreach（重点）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:foreach&gt;</span><br><span class="line">循环体：  脚本元素   HTML标签</span><br><span class="line">&lt;/c:foreach&gt;</span><br></pre></td></tr></table></figure><h4 id="5-1、指定循环次数："><a href="#5-1、指定循环次数：" class="headerlink" title="5.1、指定循环次数："></a>5.1、指定循环次数：</h4><p>begin：开始值</p><p>end：结束值</p><p>step：步长</p><p>var：pageContext域对象中的属性名，保存循环过程中的值。</p><h4 id="5-2、对数组或集合进行遍历：（重点）"><a href="#5-2、对数组或集合进行遍历：（重点）" class="headerlink" title="5.2、对数组或集合进行遍历：（重点）"></a>5.2、对数组或集合进行遍历：（重点）</h4><p>var：pageContext域对象中的属性名，保存循环过程中的值。</p><p>items：数组或集合</p><p>varStatus：pageContext域对象中的属性名，保存循环状态</p><p>​index：begin—step—end变化过程中的值。如果没有给begin–step–end赋值，则 0 1 2 3 4 5……</p><p>​count：计数器，从1开始。1 2 3 4 5……</p><p>​first：是否是第一个元素</p><p>​last：是否是最后一个元素</p><h1 id="案例：登录案例。MVC模型。"><a href="#案例：登录案例。MVC模型。" class="headerlink" title="案例：登录案例。MVC模型。"></a>案例：登录案例。MVC模型。</h1><h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><p>导入jdbc对应的jar文件。</p><p>创建数据库、创建表、插入 记录</p><p><img src="C:\Users\wangchao\AppData\Roaming\Typora\typora-user-images\image-20221013205545138.png" alt="image-20221013205545138"></p><p>u_name类型是varchar</p><p>pwd类型是int</p><h2 id="二、登录页面、判断登录成功servlet、成功页面、失败页面"><a href="#二、登录页面、判断登录成功servlet、成功页面、失败页面" class="headerlink" title="二、登录页面、判断登录成功servlet、成功页面、失败页面"></a>二、登录页面、判断登录成功servlet、成功页面、失败页面</h2><h2 id="三、编写servlet"><a href="#三、编写servlet" class="headerlink" title="三、编写servlet"></a>三、编写servlet</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(value = &quot;/login&quot;)</span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取客户端发送的用户名和密码</span><br><span class="line">            String user = request.getParameter(&quot;user&quot;);</span><br><span class="line">            int pwd = Integer.parseInt(request.getParameter(&quot;pwd&quot;));</span><br><span class="line">            //访问数据库</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            String url = &quot;jdbc:mysql://localhost:3306/wang?serverTimezone=GMT&amp;characterEncoding=utf8&quot;;</span><br><span class="line">            String name = &quot;root&quot;;</span><br><span class="line">            String password = &quot;root&quot;;</span><br><span class="line">            Connection connection = DriverManager.getConnection(url, name, password);</span><br><span class="line">            String sql = &quot;SELECT count(*) from `user`\n&quot; +</span><br><span class="line">                    &quot;where u_name=? and pwd=?&quot;;</span><br><span class="line">            PreparedStatement ps = connection.prepareStatement(sql);</span><br><span class="line">            ps.setString(1, user);</span><br><span class="line">            ps.setInt(2, pwd);</span><br><span class="line">            ResultSet set = ps.executeQuery();</span><br><span class="line">            int count = 0;</span><br><span class="line">            if (set.next())&#123;</span><br><span class="line">                count = set.getInt(1);</span><br><span class="line">            &#125;</span><br><span class="line">            //判断是否登录成功</span><br><span class="line">            boolean ok;</span><br><span class="line">            ok = count &gt; 0;</span><br><span class="line">            //根据结果进行跳转</span><br><span class="line">            if (ok)&#123;</span><br><span class="line">                HttpSession session = request.getSession();</span><br><span class="line">                session.setAttribute(&quot;user&quot;, user);</span><br><span class="line">                response.sendRedirect(&quot;/lesson/ok.jsp&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                response.sendRedirect(&quot;/lesson/fail.jsp&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、引入MVC模型（分层）"><a href="#四、引入MVC模型（分层）" class="headerlink" title="四、引入MVC模型（分层）"></a>四、引入MVC模型（分层）</h2><p>M：model    数据—访问数据库java文件   </p><p>​service层：业务处理</p><p>​dao层：访问数据库</p><p>V：view视图—前端页面—jsp文件</p><p>C：controller   控制器—servlet文件</p><p>​controller层：接收客户端发送的数据、根据service层返回的结果进行页面跳转</p><p>controller层：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(value = &quot;/login01&quot;)</span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br><span class="line">    private UserService userService = new UserService();</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取客户端发送的用户名和密码</span><br><span class="line">            String user = request.getParameter(&quot;user&quot;);</span><br><span class="line">            String pwd = request.getParameter(&quot;pwd&quot;);</span><br><span class="line">            //调用service中的方法，判断登录是否成功</span><br><span class="line">            boolean ok = userService.judgeLogin(user, pwd);</span><br><span class="line">            //根据结果进行跳转</span><br><span class="line">            if (ok) &#123;</span><br><span class="line">                HttpSession session = request.getSession();</span><br><span class="line">                session.setAttribute(&quot;user&quot;, user);</span><br><span class="line">                response.sendRedirect(&quot;/lesson/ok.jsp&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                response.sendRedirect(&quot;/lesson/fail.jsp&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service层：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class UserService &#123;</span><br><span class="line">    private UserDao userDao = new UserDao();</span><br><span class="line">    //根据dao层返回的数据判断是否登录成功。</span><br><span class="line">    public boolean judgeLogin(String user, String pwd) throws SQLException, ClassNotFoundException &#123;</span><br><span class="line">        int pwdint;</span><br><span class="line">        pwdint = Integer.parseInt(pwd);</span><br><span class="line">        int res = userDao.userPwdNumber(user, pwdint);</span><br><span class="line">        return res &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao层：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class UserDao &#123;</span><br><span class="line">    //根据用户名和密码查找记录数。</span><br><span class="line">    public int userPwdNumber(String user, int pwd) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        String url = &quot;jdbc:mysql://localhost:3306/wang?serverTimezone=GMT&amp;characterEncoding=utf8&quot;;</span><br><span class="line">        String name = &quot;root&quot;;</span><br><span class="line">        String password = &quot;root&quot;;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, name, password);</span><br><span class="line">        String sql = &quot;SELECT count(*) from `user`\n&quot; +</span><br><span class="line">                &quot;where u_name=? and pwd=?&quot;;</span><br><span class="line">        PreparedStatement ps = connection.prepareStatement(sql);</span><br><span class="line">        ps.setString(1, user);</span><br><span class="line">        ps.setInt(2, pwd);</span><br><span class="line">        ResultSet set = ps.executeQuery();</span><br><span class="line">        int count = 0;</span><br><span class="line">        if (set.next())&#123;</span><br><span class="line">            count = set.getInt(1);</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听器和过滤器"><a href="#监听器和过滤器" class="headerlink" title="监听器和过滤器"></a>监听器和过滤器</h1><h2 id="一、监听器：（重点）"><a href="#一、监听器：（重点）" class="headerlink" title="一、监听器：（重点）"></a>一、监听器：（重点）</h2><p>监听器：实现了 ****listener 接口。</p><p>作用：监听某些事件，一旦监听的事件产生，则执行设定的程序。</p><p><strong>使用：定义监听器类；在web.xml文件中配置listener标签；</strong></p><h3 id="1、applicaton监听：（重点）"><a href="#1、applicaton监听：（重点）" class="headerlink" title="1、applicaton监听：（重点）"></a>1、applicaton监听：（重点）</h3><h4 id="1-1、监听创建和销毁："><a href="#1-1、监听创建和销毁：" class="headerlink" title="1.1、监听创建和销毁："></a>1.1、监听创建和销毁：</h4><p>实现 ServletContextListener 接口。</p><p>通过参数可以获取到 ServletContext 对象。</p><h4 id="1-2、监听属性增删改："><a href="#1-2、监听属性增删改：" class="headerlink" title="1.2、监听属性增删改："></a>1.2、监听属性增删改：</h4><p>实现 ServletContextAttibuteListener 接口。</p><p>通过形参可以获取操作的属性名和属性值。</p><h3 id="2、session监听："><a href="#2、session监听：" class="headerlink" title="2、session监听："></a>2、session监听：</h3><h4 id="2-1、监听创建和销毁："><a href="#2-1、监听创建和销毁：" class="headerlink" title="2.1、监听创建和销毁："></a>2.1、监听创建和销毁：</h4><p>实现 HttpSessionListener 接口。</p><p>通过参数可以获取到 session 对象。</p><h4 id="2-2、监听属性增删改："><a href="#2-2、监听属性增删改：" class="headerlink" title="2.2、监听属性增删改："></a>2.2、监听属性增删改：</h4><p>实现 HttpSessionAttibuteListener 接口。</p><p>通过形参可以获取操作的属性名和属性值。</p><h3 id="3、request监听："><a href="#3、request监听：" class="headerlink" title="3、request监听："></a>3、request监听：</h3><h4 id="2-1、监听创建和销毁：-1"><a href="#2-1、监听创建和销毁：-1" class="headerlink" title="2.1、监听创建和销毁："></a>2.1、监听创建和销毁：</h4><p>实现 ServletRequestListener 接口。</p><p>通过参数可以获取到 request 对象。</p><h4 id="2-2、监听属性增删改：-1"><a href="#2-2、监听属性增删改：-1" class="headerlink" title="2.2、监听属性增删改："></a>2.2、监听属性增删改：</h4><p>实现 ServletRequestAttibuteListener 接口。</p><p>通过形参可以获取操作的属性名和属性值。</p><h2 id="二、过滤器：（重点）"><a href="#二、过滤器：（重点）" class="headerlink" title="二、过滤器：（重点）"></a>二、过滤器：（重点）</h2><h3 id="1、概念-："><a href="#1、概念-：" class="headerlink" title="1、概念 ："></a>1、概念 ：</h3><p>过滤器：实现了Filter接口的类。</p><p>作用：可以对servlet的请求和响应进行检查和修改。</p><p><strong>工作原理：客户端发送的请求被过滤器拦截，过滤器执行结束后可以执行请求的页面。</strong></p><p><strong>使用：定义过滤器类；配置web.xml文件中的filter 和 filter-mapping标签</strong>；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置url-pattern：</span><br><span class="line">精确匹配：具体的路径名和文件名。如：/a/b/a.jsp</span><br><span class="line">目录匹配：指定路径。如：/a/*</span><br><span class="line">扩展匹配：*.后缀名。如：*.jsp</span><br></pre></td></tr></table></figure><p>过滤器链：给一个web程序发送请求时，可能被多个过滤器捕获，则执行多个过滤器，按照web.xml文件中配置的顺序执行。</p><h3 id="2、范例："><a href="#2、范例：" class="headerlink" title="2、范例："></a>2、范例：</h3><p>登录页面、登录成功页面、商品信息页面、购买商品页面。</p><p>当给购买商品页面发送请求时，判断是否登录成功，如果已经登录成功，则显示购买商品页面，否则，显示登录页面。所有页面通过过滤器设施编码为utf-8。</p><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="一、概念：-3"><a href="#一、概念：-3" class="headerlink" title="一、概念："></a>一、概念：</h2><h3 id="1、概念：-2"><a href="#1、概念：-2" class="headerlink" title="1、概念："></a>1、概念：</h3><p>AJAX：Asynchronous  Javascript  And  Xml  异步JS和XML</p><h3 id="2、好处：（重点）"><a href="#2、好处：（重点）" class="headerlink" title="2、好处：（重点）"></a>2、好处：（重点）</h3><p>页面不会改变，只会更新页面的局部。</p><h2 id="二、工作原理：（重点）"><a href="#二、工作原理：（重点）" class="headerlink" title="二、工作原理：（重点）"></a>二、工作原理：（重点）</h2><p>客户端的 JS对象 XMLHttpRequest 给服务器端发送请求，服务器端响应的数据被客户端的 JS对象 接收，通过JS程序修改页面的局部，页面不改变。该 JS对象称为 AJAX引擎。</p><p>在AJAX操作中，在服务器端无法进行页面跳转。</p><h2 id="三、使用JavaScript实现AJAX步骤：（重点）"><a href="#三、使用JavaScript实现AJAX步骤：（重点）" class="headerlink" title="三、使用JavaScript实现AJAX步骤：（重点）"></a>三、使用JavaScript实现AJAX步骤：（重点）</h2><p>1、创建JS对象实例，并进行初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function ajaxFunction()</span><br><span class="line">&#123;</span><br><span class="line">  try</span><br><span class="line">  &#123;</span><br><span class="line">    // Firefox, Opera 8.0+, Safari</span><br><span class="line">    xmlHttp=new XMLHttpRequest();</span><br><span class="line">  &#125;</span><br><span class="line">  catch (e)</span><br><span class="line">  &#123;</span><br><span class="line">    // Internet Explorer</span><br><span class="line">    try</span><br><span class="line">    &#123;</span><br><span class="line">      xmlHttp=new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (e)</span><br><span class="line">    &#123;</span><br><span class="line">      try</span><br><span class="line">      &#123;</span><br><span class="line">        xmlHttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      catch (e)</span><br><span class="line">      &#123;</span><br><span class="line">        alert(&quot;您的浏览器不支持AJAX！&quot;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、指定响应处理函数，同时定义响应处理函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">xmlHttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">  // 我们需要在这里写一些代码</span><br><span class="line">  if(xmlHttp.readyState==4)&#123;</span><br><span class="line">    var data;</span><br><span class="line">    data = xmlHttp.responseText;</span><br><span class="line">    if (data == &#x27;true&#x27;)&#123;</span><br><span class="line">      //页面跳转</span><br><span class="line">      window.location.href = &quot;/lesson/ok.jsp&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      //显示span标签内容</span><br><span class="line">      var span;</span><br><span class="line">      span = document.getElementById(&quot;span&quot;);</span><br><span class="line">      span.style.display = &quot;inline&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、通过调用open方法 设置发送请求的URL、请求方式、是否异步。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlHttp.open(&quot;get&quot;, &quot;/lesson/login?user=wang&amp;pwd=1123&quot;, true);</span><br></pre></td></tr></table></figure><p>4、通过调用send方法 通过JS对象发送请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlHttp.send(null);</span><br></pre></td></tr></table></figure><p>通过“名字&#x3D;值&amp;名字&#x3D;值&amp;名字&#x3D;值…..”给服务器端发送参数</p><h2 id="四、使用JQuery实现AJAX："><a href="#四、使用JQuery实现AJAX：" class="headerlink" title="四、使用JQuery实现AJAX："></a>四、使用JQuery实现AJAX：</h2><h3 id="1、JQuery："><a href="#1、JQuery：" class="headerlink" title="1、JQuery："></a>1、JQuery：</h3><p>使用JS程序开发的代码库。JS框架。</p><p>初衷：写的少，做的多。</p><h3 id="2、使用JQuery实现ajax："><a href="#2、使用JQuery实现ajax：" class="headerlink" title="2、使用JQuery实现ajax："></a>2、使用JQuery实现ajax：</h3><h4 id="2-1、-get-pos"><a href="#2-1、-get-pos" class="headerlink" title="2.1、$.get  $.pos"></a>2.1、$.get  $.pos</h4><p>$.get(url,data,callback,datatype)</p><p>$.post(url,data,callback,datatype)</p><p>url：给服务器端发送请求的url</p><p>data：给服务器端发送请求时发送的数据。数据格式通常为JSON格式。{“名字”:值，”名字”:值……}</p><p>callback：函数。接收服务器端响应的数据后进行的事件处理程序。</p><p>​第一个参数：接收服务器端响应的数据。</p><p>​第二个参数：接收服务器端响应数据的状态。值为 “success” 则说明接收完成。</p><p>​第三个参数：接收 AJAX引擎对象。即：XMLHttpRequest 对象。</p><p>datatype：设定发送给服务器端的数据类型。</p><h4 id="2-2、-ajax（重点）"><a href="#2-2、-ajax（重点）" class="headerlink" title="2.2、$.ajax（重点）"></a>2.2、$.ajax（重点）</h4><p>$.ajax(<em>{name:value, name:value, … }</em>)（重点）</p><p>该参数规定 AJAX 请求的一个或多个名称&#x2F;值对。</p><p>下面的表格中列出了可能的名称&#x2F;值：</p><table><thead><tr><th align="left">名称</th><th align="left">值&#x2F;描述</th></tr></thead><tbody><tr><td align="left"><strong>async</strong></td><td align="left">布尔值，表示请求是否异步处理。默认是 true。</td></tr><tr><td align="left">beforeSend(<em>xhr</em>)</td><td align="left">发送请求前运行的函数。</td></tr><tr><td align="left">cache</td><td align="left">布尔值，表示浏览器是否缓存被请求页面。默认是 true。</td></tr><tr><td align="left">complete(<em>xhr,status</em>)</td><td align="left">请求完成时运行的函数（在请求成功或失败之后均调用，即在 success 和 error 函数之后）。</td></tr><tr><td align="left">contentType</td><td align="left">发送数据到服务器时所使用的内容类型。默认是：”application&#x2F;x-www-form-urlencoded”。</td></tr><tr><td align="left">context</td><td align="left">为所有 AJAX 相关的回调函数规定 “this” 值。</td></tr><tr><td align="left"><strong>data</strong></td><td align="left">规定要发送到服务器的数据。</td></tr><tr><td align="left">dataFilter(<em>data</em>,<em>type</em>)</td><td align="left">用于处理 XMLHttpRequest 原始响应数据的函数。</td></tr><tr><td align="left">dataType</td><td align="left">预期的服务器响应的数据类型。</td></tr><tr><td align="left">error(<em>xhr,status,error</em>)</td><td align="left">如果请求失败要运行的函数。</td></tr><tr><td align="left">global</td><td align="left">布尔值，规定是否为请求触发全局 AJAX 事件处理程序。默认是 true。</td></tr><tr><td align="left">ifModified</td><td align="left">布尔值，规定是否仅在最后一次请求以来响应发生改变时才请求成功。默认是 false。</td></tr><tr><td align="left">jsonp</td><td align="left">在一个 jsonp 中重写回调函数的字符串。</td></tr><tr><td align="left">jsonpCallback</td><td align="left">在一个 jsonp 中规定回调函数的名称。</td></tr><tr><td align="left">password</td><td align="left">规定在 HTTP 访问认证请求中使用的密码。</td></tr><tr><td align="left">processData</td><td align="left">布尔值，规定通过请求发送的数据是否转换为查询字符串。默认是 true。</td></tr><tr><td align="left">scriptCharset</td><td align="left">规定请求的字符集。</td></tr><tr><td align="left"><strong>success(<em>result,status,xhr</em>)</strong></td><td align="left">当请求成功时运行的函数。</td></tr><tr><td align="left">timeout</td><td align="left">设置本地的请求超时时间（以毫秒计）。</td></tr><tr><td align="left">traditional</td><td align="left">布尔值，规定是否使用参数序列化的传统样式。</td></tr><tr><td align="left"><strong>type</strong></td><td align="left">规定请求的类型（GET 或 POST）。</td></tr><tr><td align="left"><strong>url</strong></td><td align="left">规定发送请求的 URL。默认是当前页面。</td></tr><tr><td align="left">username</td><td align="left">规定在 HTTP 访问认证请求中使用的用户名。</td></tr><tr><td align="left">xhr</td><td align="left">用于创建 XMLHttpRequest 对象的函数。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JSON 与 JS 对象的关系</span><br><span class="line">JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。如</span><br><span class="line">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; //这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json = &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;; //这是一个 JSON 字符串，本质是一个字符串</span><br><span class="line">JSON 和 JS 对象互转</span><br><span class="line">要实现从JSON字符串转换为JS对象，使用 JSON.parse() 方法：</span><br><span class="line">var obj = JSON.parse(&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;); //结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span><br><span class="line">要实现从JS对象转换为JSON字符串，使用 JSON.stringify() 方法：</span><br><span class="line">var json = JSON.stringify(&#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;); //结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-Study</title>
      <link href="/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FStudy/"/>
      <url>/2023/08/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FStudy/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习本文的前提：熟悉掌握JavaSE</p><p>设计模式：要求很好的可扩展性、可维护性、可重用性。高内聚低耦合。</p><p>概念  设计模式的七种设计原则  创建型模式（单例模式、工厂模式、原型模式等）  结构型模式（适配器模式、装饰模式、组合模式、外观模式等）   行为型模式（观察者模式、解释器模式、迭代器模式、命令模式等）共 23 种设计模式。</p><p>本文最初修改时间：2022年10月27日 星期四 </p><p>由课堂总结完成</p><p>内容篇幅较长同时需要阅读更多前置内容</p> <span id="more"></span><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="一、设计模式的重要性："><a href="#一、设计模式的重要性：" class="headerlink" title="一、设计模式的重要性："></a>一、设计模式的重要性：</h2><p>在软件开发中，设计模式是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。</p><p>在项目开发过程中，客户会提出新增功能或修改功能的要求。</p><p>开发项目的员工离职，需要另一个员工维护该员工的项目。（可读性、规范性）</p><h2 id="二、学习设计模式的目的："><a href="#二、学习设计模式的目的：" class="headerlink" title="二、学习设计模式的目的："></a>二、学习设计模式的目的：</h2><p>1、可扩展性。新增功能很方便。</p><p>2、可维护性。阅读代码、修改代码很方便。</p><p>3、可重用性。相同的代码尽可能保持一份。</p><p>4、代码呈现高内聚，低耦合的特性。</p><h2 id="三、UML图：（重点）"><a href="#三、UML图：（重点）" class="headerlink" title="三、UML图：（重点）"></a>三、UML图：（重点）</h2><p>UML：Unified  Modeling  Language   统一建模语言。</p><p>UML图描述类和接口的结构，以及类与类、类与接口、接口与接口之间的关系。</p><p>例子：</p><img src="C:\Users\wangchao\AppData\Roaming\Typora\typora-user-images\image-20220829174745299.png" alt="image-20220829174745299" style="zoom:50%;" /><p>class  Person{</p><p>​public int id；</p><p>​protected String name；</p><p>​private char sex;</p><p>​float score;</p><p>​public void add(int a, int b){}</p><p>}</p><img src="C:\Users\wangchao\AppData\Roaming\Typora\typora-user-images\image-20220829180131280.png" alt="image-20220829180131280" style="zoom:50%;" /><p>interface  USB{</p><p>​int WIDTH &#x3D; 10;</p><p>​int HEIGHT &#x3D; 10;</p><p>​void sendData();</p><p>​void recieveData();</p><p>}</p><p>作业：绘制类和接口的UML图，根据UML图编写对应的java程序。</p><p>UML图描述类与类之间的关系：</p><p>​<strong>代码uml</strong></p><p><strong>依赖关系：类中方法参数是类类型   虚线箭头，箭头指向形参类型</strong></p><p><strong>继承关系（泛化关系）：子类   extends  父类实线空心箭头，箭头指向父类</strong></p><p><strong>继承关系是 “是”的关系</strong></p><p><strong>实现关系：类  implements  接口 虚线空心箭头，箭头指向接口</strong></p><p><strong>实现关系是 “能”的关系</strong></p><p><strong>聚合关系： 类中的成员变量是类类型，实线空心菱形，菱形指向拥有该类的类</strong></p><p>​<strong>可以使用另一个对象初始化</strong></p><p><strong>组合关系： 类中的成员变量是类类型，实线实心菱形，菱形指向拥有该类的类</strong></p><p>​<strong>通过new对象进行初始化</strong></p><p><strong>聚合关系 和 组合关系 是 “有”的关系</strong></p><p>作业：</p><p>1、抄写类与类之间的关系。</p><p>2、画出氧气、动物、鸟、翅膀、大雁、飞翔、雁群之间的关系。</p><h2 id="四、设计模式的七种设计原则：（重点）"><a href="#四、设计模式的七种设计原则：（重点）" class="headerlink" title="四、设计模式的七种设计原则：（重点）"></a>四、设计模式的七种设计原则：（重点）</h2><p>提出实际需求—-传统思路解决问题—-存在问题—-引出设计模式—-原理分析—–UML图—-使用某种设计模式解决问题</p><h3 id="1、七种设计原则："><a href="#1、七种设计原则：" class="headerlink" title="1、七种设计原则："></a>1、七种设计原则：</h3><p>1.1、单一职责原则</p><p>1.2、依赖倒置原则</p><p>1.3、接口隔离原则：</p><p>1.4、里氏替换原则：</p><p>1.5、开闭原则：</p><p>1.6、迪米特法则：</p><p>1.7、合成复用原则：</p><h3 id="2、单一职责原则："><a href="#2、单一职责原则：" class="headerlink" title="2、单一职责原则："></a>2、单一职责原则：</h3><p>一个类只负责一个职责。降低类的复杂度。</p><p>例子：</p><p>定义类实现空中、陆地、水中交通工具的移动功能。</p><p>扩展功能：增加太空交通工具移动功能；</p><p>修改功能：修改水中交通工具的移动功能。</p><p>解决方案：定义空中交通工具类、陆地交通工具类、水中交通工具类。</p><h3 id="3、依赖倒置原则："><a href="#3、依赖倒置原则：" class="headerlink" title="3、依赖倒置原则："></a>3、依赖倒置原则：</h3><p>依赖倒置的中心思想是面向接口编程。</p><p>使用接口或抽象类的目的是指定好功能和规范，而不设计任何具体的操作，把展现细节的任务交给他们的实现类去完成。</p><p>例子：</p><p>微信：发送数据的功能。</p><p>人：接收数据的功能。接收微信对象发送的数据，并打印数据。</p><p>扩展功能：增加QQ、电话</p><p>解决方法：定义发送数据接口，微信、QQ、电话实现该接口，人的接收数据方法的参数为接口类型。</p><h3 id="4、接口隔离原则："><a href="#4、接口隔离原则：" class="headerlink" title="4、接口隔离原则："></a>4、接口隔离原则：</h3><p>将一个接口拆分成多个接口，不同的类与他们所需要的接口建立依赖关系。</p><p>例子：</p><p>出租车公司–work()、游艇公司–work()、航空公司–work()、白宫–work() 、一个接口</p><p>传统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">interface Power&#123;</span><br><span class="line">    public void car();</span><br><span class="line">    public void ship();</span><br><span class="line">    public void plane();</span><br><span class="line">&#125;</span><br><span class="line">//创建人</span><br><span class="line">class CarPerson implements Power&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void car() &#123;</span><br><span class="line">        System.out.println(&quot;我会开车&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void ship() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void plane() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ShipPerson implements Power&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void car() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void ship() &#123;</span><br><span class="line">        System.out.println(&quot;我会开船&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void plane() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PlanePerson implements Power&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void car() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void ship() &#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void plane() &#123;</span><br><span class="line">        System.out.println(&quot;我会开飞机&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class BaobiaoPerson implements Power&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void car() &#123;</span><br><span class="line">        System.out.println(&quot;我会开车&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void ship() &#123;</span><br><span class="line">        System.out.println(&quot;我会开船&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void plane() &#123;</span><br><span class="line">        System.out.println(&quot;我会开飞机&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建公司</span><br><span class="line">class CarCompant&#123;</span><br><span class="line">    public void work(Power power)&#123;</span><br><span class="line">        power.car();</span><br><span class="line">        System.out.println(&quot;这个人会开车，出租车公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ShipCompant&#123;</span><br><span class="line">    public void work(Power power)&#123;</span><br><span class="line">        power.ship();</span><br><span class="line">        System.out.println(&quot;这个人会开船，船务公司公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PlaneCompant&#123;</span><br><span class="line">    public void work(Power power)&#123;</span><br><span class="line">        power.plane();</span><br><span class="line">        System.out.println(&quot;这个人会开飞机，航空公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BaobiaorCompant&#123;</span><br><span class="line">    public void work(Power power)&#123;</span><br><span class="line">        power.car();</span><br><span class="line">        power.ship();</span><br><span class="line">        power.plane();</span><br><span class="line">        System.out.println(&quot;这个人会开车、快船、开飞机，保镖公司公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建公司</span><br><span class="line">        CarCompant carCompant = new CarCompant();</span><br><span class="line">        ShipCompant shipCompant = new ShipCompant();</span><br><span class="line">        PlaneCompant planeCompant = new PlaneCompant();</span><br><span class="line">        BaobiaorCompant baobiaorCompant = new BaobiaorCompant();</span><br><span class="line"></span><br><span class="line">        //创建人</span><br><span class="line">        CarPerson carPerson = new CarPerson();</span><br><span class="line">        ShipPerson shipPerson = new ShipPerson();</span><br><span class="line">        PlanePerson planePerson = new PlanePerson();</span><br><span class="line">        BaobiaoPerson baobiaoPerson = new BaobiaoPerson();</span><br><span class="line"></span><br><span class="line">        //公司运转</span><br><span class="line">        carCompant.work(carPerson);</span><br><span class="line">        shipCompant.work(shipPerson);</span><br><span class="line">        planeCompant.work(planePerson);</span><br><span class="line">        baobiaorCompant.work(baobiaoPerson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口隔离原则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">//创建接口</span><br><span class="line">interface CarPower&#123;</span><br><span class="line">    public void car();</span><br><span class="line">&#125;</span><br><span class="line">interface ShipPower&#123;</span><br><span class="line">    public void ship();</span><br><span class="line">&#125;</span><br><span class="line">interface PlanePower&#123;</span><br><span class="line">    public void plane();</span><br><span class="line">&#125;</span><br><span class="line">interface AllPower extends CarPower, ShipPower, PlanePower&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建人</span><br><span class="line">class CarPerson implements CarPower &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void car() &#123;</span><br><span class="line">        System.out.println(&quot;我会开车&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ShipPerson implements ShipPower&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void ship() &#123;</span><br><span class="line">        System.out.println(&quot;我会开船&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PlanePerson implements PlanePower&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void plane() &#123;</span><br><span class="line">        System.out.println(&quot;我会开飞机&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class BaobiaoPerson implements AllPower&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void car() &#123;</span><br><span class="line">        System.out.println(&quot;我会开车&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void ship() &#123;</span><br><span class="line">        System.out.println(&quot;我会开船&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void plane() &#123;</span><br><span class="line">        System.out.println(&quot;我会开飞机&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建公司</span><br><span class="line">class CarCompant&#123;</span><br><span class="line">    public void work(CarPower power)&#123;</span><br><span class="line">        power.car();</span><br><span class="line">        System.out.println(&quot;这个人会开车，出租车公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ShipCompant&#123;</span><br><span class="line">    public void work(ShipPower power)&#123;</span><br><span class="line">        power.ship();</span><br><span class="line">        System.out.println(&quot;这个人会开船，船务公司公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PlaneCompant&#123;</span><br><span class="line">    public void work(PlanePower power)&#123;</span><br><span class="line">        power.plane();</span><br><span class="line">        System.out.println(&quot;这个人会开飞机，航空公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BaobiaorCompant&#123;</span><br><span class="line">    public void work(AllPower power)&#123;</span><br><span class="line">        power.car();</span><br><span class="line">        power.ship();</span><br><span class="line">        power.plane();</span><br><span class="line">        System.out.println(&quot;这个人会开车、快船、开飞机，保镖公司公司正常运营&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建公司</span><br><span class="line">        CarCompant carCompant = new CarCompant();</span><br><span class="line">        ShipCompant shipCompant = new ShipCompant();</span><br><span class="line">        PlaneCompant planeCompant = new PlaneCompant();</span><br><span class="line">        BaobiaorCompant baobiaorCompant = new BaobiaorCompant();</span><br><span class="line"></span><br><span class="line">        //创建人</span><br><span class="line">        CarPerson carPerson = new CarPerson();</span><br><span class="line">        ShipPerson shipPerson = new ShipPerson();</span><br><span class="line">        PlanePerson planePerson = new PlanePerson();</span><br><span class="line">        BaobiaoPerson baobiaoPerson = new BaobiaoPerson();</span><br><span class="line"></span><br><span class="line">        //公司运转</span><br><span class="line">        carCompant.work(carPerson);</span><br><span class="line">        shipCompant.work(shipPerson);</span><br><span class="line">        planeCompant.work(planePerson);</span><br><span class="line">        baobiaorCompant.work(baobiaoPerson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、里氏替换原则："><a href="#5、里氏替换原则：" class="headerlink" title="5、里氏替换原则："></a>5、里氏替换原则：</h3><p>在使用继承的时候，在子类中尽量不要重写父类中的方法。</p><p>以便做的 所有引用父类的地方必须能够透明的使用其子类对象。</p><p>在适当的情况下，通过提取接口或抽象类、聚合、组合的方法解决问题。</p><p>例子：</p><p>一个A类，计算加法，计算乘法；另一个B类继承A类，对A中计算加法的方法重写。</p><p>传统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    public int count(int a, int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    public int factor(int a)&#123;</span><br><span class="line">        int total = 1;</span><br><span class="line">        for (int i=2; i&lt;=a; i++)&#123;</span><br><span class="line">            total *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        return total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B extends A&#123;</span><br><span class="line">    public int count(int a, int b)&#123;</span><br><span class="line">        return a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    static void f(A oa)&#123;</span><br><span class="line">        int i = oa.count(3, 4);</span><br><span class="line">        System.out.println(&quot;3+4=&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A oa = new A();</span><br><span class="line">        B ob = new B();</span><br><span class="line">        f(oa);</span><br><span class="line">        f(ob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里氏替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">interface Count&#123;</span><br><span class="line">    public int count(int a, int b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A implements Count&#123;</span><br><span class="line">    public int count(int a, int b)&#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    public int factor(int a)&#123;</span><br><span class="line">        int total = 1;</span><br><span class="line">        for (int i=2; i&lt;=a; i++)&#123;</span><br><span class="line">            total *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        return total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B implements Count&#123;</span><br><span class="line">    public int count(int a, int b)&#123;</span><br><span class="line">        return a - b;</span><br><span class="line">    &#125;</span><br><span class="line">    A oa = new A();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    static void f(A oa)&#123;</span><br><span class="line">        int i = oa.count(3, 4);</span><br><span class="line">        System.out.println(&quot;3+4=&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        A oa = new A();</span><br><span class="line">        B ob = new B();</span><br><span class="line"></span><br><span class="line">        f(oa);</span><br><span class="line">        //f(ob)</span><br><span class="line"></span><br><span class="line">        int a = ob.oa.factor(5);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、开闭原则："><a href="#6、开闭原则：" class="headerlink" title="6、开闭原则："></a>6、开闭原则：</h3><p>模块和函数应该对扩展开发，对修改关闭，用抽象构建框架，用实现扩展细节。</p><p>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p><p>编程中遵循其他原则，以及使用设计模式的目的就是遵循开闭原则。</p><p>问题：打印形状。打印圆形、方形、矩形。扩展：打印三角形。</p><p>传统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class ShapeOper&#123;</span><br><span class="line">    public void printShape(int sort)&#123;</span><br><span class="line">        switch (sort)&#123;</span><br><span class="line">            case 1:</span><br><span class="line">                System.out.println(&quot;打印圆形&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                System.out.println(&quot;打印方形&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                System.out.println(&quot;打印矩形&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                System.out.println(&quot;打印三角形&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ShapeOper shapeOper = new ShapeOper();</span><br><span class="line">        shapeOper.printShape(1);</span><br><span class="line">        shapeOper.printShape(2);</span><br><span class="line">        shapeOper.printShape(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开闭原则：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">interface PrintShape &#123;</span><br><span class="line">    public void draw();</span><br><span class="line">&#125;</span><br><span class="line">class 圆形 implements PrintShape&#123;</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画了一个圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class 矩形 implements PrintShape&#123;</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画了一个矩形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class 方形 implements PrintShape&#123;</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画了一个方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ShapeOper&#123;</span><br><span class="line">    public void print(PrintShape printShape)&#123;</span><br><span class="line">        printShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class 三角形 implements PrintShape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;打印三角形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ShapeOper shapeOper = new ShapeOper();</span><br><span class="line">        圆形 yuan = new 圆形();</span><br><span class="line">        方形 fang = new 方形();</span><br><span class="line">        矩形 ju = new 矩形();</span><br><span class="line">        三角形 san = new 三角形();</span><br><span class="line">        shapeOper.print(yuan);</span><br><span class="line">        shapeOper.print(fang);</span><br><span class="line">        shapeOper.print(ju);</span><br><span class="line">        shapeOper.print(san);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、迪米特法则："><a href="#7、迪米特法则：" class="headerlink" title="7、迪米特法则："></a>7、迪米特法则：</h3><p>又称为最少知道原则，即一个类对自己依赖的类知道的越少越好。</p><p>对于被依赖的类不管多么复杂，都尽量将逻辑处理封装在类的内部，对外提供public方法，不对外泄露任何信息。</p><p>直接朋友：类中出现在成员变量、方法参数、方法返回类型中的类是直接朋友。</p><p>如：class A{</p><p>​D od;</p><p>​B f(C oc){}</p><p>}</p><p>陌生朋友：类中的方法中的局部变量的类是陌生朋友。</p><p>如：class A{</p><p>​void f(){</p><p>​B ob &#x3D; new B();</p><p>​}</p><p>}</p><p>问题：</p><p>学生类     班级类     聚合关系</p><p>打印类   打印班级信息，以及班级中的学生信息。</p><p>传统：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">class Student&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student(int id, String name, int age) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Grade&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    List&lt;Student&gt; list;</span><br><span class="line"></span><br><span class="line">    public Grade(int id, String name, List&lt;Student&gt; list) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; getList() &#123;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setList(List&lt;Student&gt; list) &#123;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class PrintOper&#123;</span><br><span class="line">    public void printGrade(List&lt;Grade&gt; list)&#123;</span><br><span class="line">        for (Grade g: list)&#123;</span><br><span class="line">            int id = g.getId();</span><br><span class="line">            String name = g.getName();</span><br><span class="line">            System.out.println(&quot;班级信息：班号：&quot;+id+&quot;    名字：&quot;+name);</span><br><span class="line"></span><br><span class="line">            List&lt;Student&gt; list1 = g.getList();</span><br><span class="line">            for (Student s: list1)&#123;</span><br><span class="line">                System.out.println(&quot;\t&quot;+s.getId()+&quot;\t&quot;+s.getName()+&quot;\t&quot;+s.getAge());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Grade&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        PrintOper printOper = new PrintOper();</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list1;</span><br><span class="line">        list1 = new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(new Student(101, &quot;aa&quot;, 11));</span><br><span class="line">        list1.add(new Student(102, &quot;aa&quot;, 12));</span><br><span class="line">        list1.add(new Student(103, &quot;aa&quot;, 13));</span><br><span class="line">        list1.add(new Student(104, &quot;aa&quot;, 14));</span><br><span class="line">        list.add(new Grade(1, &quot;一一班&quot;, list1));</span><br><span class="line">        list1 = new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(new Student(201, &quot;aa&quot;, 21));</span><br><span class="line">        list1.add(new Student(202, &quot;aa&quot;, 22));</span><br><span class="line">        list1.add(new Student(203, &quot;aa&quot;, 23));</span><br><span class="line">        list1.add(new Student(204, &quot;aa&quot;, 24));</span><br><span class="line">        list.add(new Grade(2, &quot;一二班&quot;, list1));</span><br><span class="line">        list1 = new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(new Student(301, &quot;aa&quot;, 31));</span><br><span class="line">        list1.add(new Student(302, &quot;aa&quot;, 32));</span><br><span class="line">        list1.add(new Student(303, &quot;aa&quot;, 33));</span><br><span class="line">        list1.add(new Student(304, &quot;aa&quot;, 34));</span><br><span class="line">        list.add(new Grade(3, &quot;一三班&quot;, list1));</span><br><span class="line"></span><br><span class="line">        printOper.printGrade(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迪米特：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">class Student&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Student(int id, String name, int age) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Grade&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    List&lt;Student&gt; list;</span><br><span class="line"></span><br><span class="line">    public Grade(int id, String name, List&lt;Student&gt; list) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void printStudent()&#123;</span><br><span class="line">        for (Student s: list)&#123;</span><br><span class="line">            System.out.println(&quot;\t&quot;+s.getId()+&quot;\t&quot;+s.getName()+&quot;\t&quot;+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Student&gt; getList() &#123;</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setList(List&lt;Student&gt; list) &#123;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class PrintOper&#123;</span><br><span class="line">    public void printGrade(List&lt;Grade&gt; list)&#123;</span><br><span class="line">        for (Grade g: list)&#123;</span><br><span class="line">            int id = g.getId();</span><br><span class="line">            String name = g.getName();</span><br><span class="line">            System.out.println(&quot;班级信息：班号：&quot;+id+&quot;    名字：&quot;+name);</span><br><span class="line"></span><br><span class="line">            g.printStudent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Grade&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        PrintOper printOper = new PrintOper();</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list1;</span><br><span class="line">        list1 = new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(new Student(101, &quot;aa&quot;, 11));</span><br><span class="line">        list1.add(new Student(102, &quot;aa&quot;, 12));</span><br><span class="line">        list1.add(new Student(103, &quot;aa&quot;, 13));</span><br><span class="line">        list1.add(new Student(104, &quot;aa&quot;, 14));</span><br><span class="line">        list.add(new Grade(1, &quot;一一班&quot;, list1));</span><br><span class="line">        list1 = new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(new Student(201, &quot;aa&quot;, 21));</span><br><span class="line">        list1.add(new Student(202, &quot;aa&quot;, 22));</span><br><span class="line">        list1.add(new Student(203, &quot;aa&quot;, 23));</span><br><span class="line">        list1.add(new Student(204, &quot;aa&quot;, 24));</span><br><span class="line">        list.add(new Grade(2, &quot;一二班&quot;, list1));</span><br><span class="line">        list1 = new ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(new Student(301, &quot;aa&quot;, 31));</span><br><span class="line">        list1.add(new Student(302, &quot;aa&quot;, 32));</span><br><span class="line">        list1.add(new Student(303, &quot;aa&quot;, 33));</span><br><span class="line">        list1.add(new Student(304, &quot;aa&quot;, 34));</span><br><span class="line">        list.add(new Grade(3, &quot;一三班&quot;, list1));</span><br><span class="line"></span><br><span class="line">        printOper.printGrade(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、合成复用原则"><a href="#8、合成复用原则" class="headerlink" title="8、合成复用原则"></a>8、合成复用原则</h3><p>原则上尽量使用组合或聚合方式，而不使用继承方法。</p><p>如：汽车类   轮胎类</p><p>有的关系：组合、聚合</p><p>是的关系：继承</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="一、概念："><a href="#一、概念：" class="headerlink" title="一、概念："></a>一、概念：</h2><h2 id="1、什么是设计模式："><a href="#1、什么是设计模式：" class="headerlink" title="1、什么是设计模式："></a>1、什么是设计模式：</h2><p>设计模式 ：程序员在面对同类软件工程设计问题所总结出来的有用经验，设计模式不是代码，是某类问题通用的解决方案。</p><h2 id="2、设计模式的类型："><a href="#2、设计模式的类型：" class="headerlink" title="2、设计模式的类型："></a>2、设计模式的类型：</h2><h3 id="2-1、创建型模式："><a href="#2-1、创建型模式：" class="headerlink" title="2.1、创建型模式："></a>2.1、创建型模式：</h3><p>单例模式、抽象工厂模式、原型模式、建造者模式、工厂模式</p><h3 id="2-2、结构型模式："><a href="#2-2、结构型模式：" class="headerlink" title="2.2、结构型模式："></a>2.2、结构型模式：</h3><p>适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p><h3 id="2-3、行为型模式："><a href="#2-3、行为型模式：" class="headerlink" title="2.3、行为型模式："></a>2.3、行为型模式：</h3><p>模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>通过单例模式实现一个类只能创建一个对象。</p><p>单例模式：就是采用一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个获取该类对象的方法。</p><h2 id="一、饿汉式："><a href="#一、饿汉式：" class="headerlink" title="一、饿汉式："></a>一、饿汉式：</h2><h3 id="1、static关键字："><a href="#1、static关键字：" class="headerlink" title="1、static关键字："></a>1、static关键字：</h3><p>成员变量：属于类的；只有一份空间；类加载到内存时分配空间；类名.成员变量名或对象.成员变量名</p><p>成员方法：属于类；没有this参数；只能访问静态成员；类名.成员方法或对象.成员方法；不能被重写</p><p>内部类：属于外部类；</p><p>代码块：类加载到内存时执行一次；</p><h3 id="2、final关键字："><a href="#2、final关键字：" class="headerlink" title="2、final关键字："></a>2、final关键字：</h3><p>成员变量：必须初始化；值不能被改变；</p><p>局部变量：只能赋一次值；值不能被改变；</p><p>成员方法：不能被重写；</p><p>类：不能被继承；</p><h3 id="3、实现单例："><a href="#3、实现单例：" class="headerlink" title="3、实现单例："></a>3、实现单例：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Singleton&#123;</span><br><span class="line">//private final关键字是为了避免该变量被修改。</span><br><span class="line">//在静态方法中要使用该变量，所以要加static关键字</span><br><span class="line">    private final static Singleton instance = new Singleton();</span><br><span class="line">    //private关键字是为了避免在该类的外部任意的new对象。</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    //static是为了在该类外部能通过类名访问。</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、优缺点："><a href="#4、优缺点：" class="headerlink" title="4、优缺点："></a>4、优缺点：</h3><p>优点：代码简单；效率高；避免了线程同步问题；</p><p>缺点：没有实现懒加载，造成内存的浪费；</p><h3 id="5、代码："><a href="#5、代码：" class="headerlink" title="5、代码："></a>5、代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Singleton&#123;</span><br><span class="line">    private final static Singleton instance = new Singleton();</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、懒汉式："><a href="#二、懒汉式：" class="headerlink" title="二、懒汉式："></a>二、懒汉式：</h2><h3 id="1、线程概念："><a href="#1、线程概念：" class="headerlink" title="1、线程概念："></a>1、线程概念：</h3><p>一段代码的执行过程；是程序执行的最小单位；并发执行；</p><h3 id="2、创建线程："><a href="#2、创建线程：" class="headerlink" title="2、创建线程："></a>2、创建线程：</h3><p>创建线程类，继承Thread类，重写run方法。</p><p>创建线程类对象，调用start方法，线程开始执行。</p><h3 id="3、线程互斥操作："><a href="#3、线程互斥操作：" class="headerlink" title="3、线程互斥操作："></a>3、线程互斥操作：</h3><p>synchronized（对象）{</p><p>​对临界资源操作的代码</p><p>}</p><p>两个线程执行过程中，括号中的对象要求是同一个对象。</p><h3 id="4、反射"><a href="#4、反射" class="headerlink" title="4、反射"></a>4、反射</h3><p>Class     Constructor    Method    Field</p><p>Class是JDK定义的类。</p><p>Class类对象中保存一个类的信息。如：类名、构造方法、成员方法、成员变量等信息。</p><p>当一个类加载到内存时，java虚拟机会创建该类对应的Class对象。一个类对应的Class对象只有一个。</p><p>获取一个类对应的Class对象：类名.class</p><h3 id="5、懒汉式实现单例模式："><a href="#5、懒汉式实现单例模式：" class="headerlink" title="5、懒汉式实现单例模式："></a>5、懒汉式实现单例模式：</h3><p>私有的构造方法；</p><p>成员变量保存创建的类对象；</p><p>提供一个方法返回创建的类对象；</p><h3 id="6、优缺点："><a href="#6、优缺点：" class="headerlink" title="6、优缺点："></a>6、优缺点：</h3><p>优点：实现懒加载；线程安全；</p><p>缺点：执行效率低；</p><h3 id="7、代码："><a href="#7、代码：" class="headerlink" title="7、代码："></a>7、代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Singleton&#123;</span><br><span class="line">    //私有构造方法，保证其他类中不能创建该类对象；</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line">    //private：保证其他类中不能修改instance成员变量的值。</span><br><span class="line">    //不能有final：为了实现懒加载，需要在方法中创建该类对象。</span><br><span class="line">    //static：在静态方法getInstance中使用。</span><br><span class="line">    private static Singleton instance = null;</span><br><span class="line">    //static：保证在其他类中使用类名调用该方法。</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        //if语句：提高程序执行效率</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            //synchronized：解决线程不同步问题。</span><br><span class="line">            //不能时instance，因为初始值为null，没有指向某个对象。</span><br><span class="line">            //类名.class对应的对象只有一个。</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                //if语句：保证只创建一个对象。</span><br><span class="line">                if (instance == null) &#123;</span><br><span class="line">                    instance = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、静态内部类："><a href="#三、静态内部类：" class="headerlink" title="三、静态内部类："></a>三、静态内部类：</h2><h3 id="1、内部类："><a href="#1、内部类：" class="headerlink" title="1、内部类："></a>1、内部类：</h3><h4 id="1-1、基本使用："><a href="#1-1、基本使用：" class="headerlink" title="1.1、基本使用："></a>1.1、基本使用：</h4><p>使用的修饰符：public   protected   private    static</p><p>非静态内部类：</p><p>​外部类名.内部类名  变量名；</p><p>​创建外部类对象;  外部类对象.new  内部类名();</p><p>静态内部类：</p><p>​外部类名.内部类名  变量名；</p><p>​new  外部类名.内部类名()；</p><h4 id="1-2、特点："><a href="#1-2、特点：" class="headerlink" title="1.2、特点："></a>1.2、特点：</h4><p>在外部类中可以访问内部类的private成员；在内部类中可以访问外部类中的private成员；</p><p>在外部类中可以实例化内部类对象；在内部类中可以实例化外部类对象；</p><p>外部类加载到内存时，内部类 不会 随之加载到内存；</p><p>非静态内部类中不能有静态成员；</p><h3 id="2、静态内部类实现单例模式："><a href="#2、静态内部类实现单例模式：" class="headerlink" title="2、静态内部类实现单例模式："></a>2、静态内部类实现单例模式：</h3><p>与饿汉式类似。</p><p>区别：private static final Singleton instance &#x3D; new Singleton(); 语句放置在静态内部类中。</p><h3 id="3、代码："><a href="#3、代码：" class="headerlink" title="3、代码："></a>3、代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Singleton&#123;</span><br><span class="line">    //保证其他类中不能实例化该类对象</span><br><span class="line">    private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    //private：保证外部类不能使用该内部类。</span><br><span class="line">    private static class Inner&#123;</span><br><span class="line">        //private final：在其他类中不能被修改</span><br><span class="line">        //static：在静态方法中使用</span><br><span class="line">        //放置在内部类中：不会随着外部类的加载而创建对象，实现懒加载</span><br><span class="line">        private static final Singleton instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //static：保证在其他类中使用类名调用该方法。</span><br><span class="line">    public static Singleton getInstance()&#123;</span><br><span class="line">        return Inner.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、优缺点：-1"><a href="#4、优缺点：-1" class="headerlink" title="4、优缺点："></a>4、优缺点：</h3><p>优点：实现懒加载，线程安全，效率高。</p><p>缺点：代码不容易理解。</p><p>推荐使用静态内部类方式实现单例模式。</p><h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="一、概念：-1"><a href="#一、概念：-1" class="headerlink" title="一、概念："></a>一、概念：</h2><p>1、工厂模式是创建型模式。</p><p>2、工厂模式提供了一种创建对象的最佳方式。</p><p>3、创建复杂对象时，适合使用工厂模式；如果创建简单对象，则只需new就可以。</p><p>4、在工厂模式中，在创建对象时不会对客户端暴漏创建逻辑，并且使用一个统一的接口来指向新创建的对象。</p><h2 id="二、范例："><a href="#二、范例：" class="headerlink" title="二、范例："></a>二、范例：</h2><p>创建图形，根据指定的名字创建 三角形、圆形、矩形对象。</p><p>传统方式：</p><p>一个方法无法返回多种类型。</p><p>工厂模式：</p><p><img src="C:\Users\wangchao\AppData\Roaming\Typora\typora-user-images\image-20220920165309827.png" alt="image-20220920165309827"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//接口</span><br><span class="line">interface Shape&#123;</span><br><span class="line">    public void draw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//三个实现了Shape接口的实现类</span><br><span class="line">class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;我是圆形对象，可以画圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Square implements Shape&#123;</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;我是方形对象，可以画方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Rectangle implements Shape&#123;</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;我是三角形形对象，可以画三角形形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//工厂类，创建实现了Shape接口的类对象</span><br><span class="line">class ShapeFactory&#123;</span><br><span class="line">    public Shape getShape(String name)&#123;</span><br><span class="line">        //必须先判断name是否为null，否则，执行name.equals(&quot;circle&quot;)，会出现空指针异常</span><br><span class="line">        if (name == null)</span><br><span class="line">            return null;</span><br><span class="line">        switch (name)&#123;</span><br><span class="line">            case &quot;circle&quot;:</span><br><span class="line">                return new Circle();</span><br><span class="line">            case &quot;square&quot;:</span><br><span class="line">                return new Square();</span><br><span class="line">            case &quot;rectangle&quot;:</span><br><span class="line">                return new Rectangle();</span><br><span class="line">            default:</span><br><span class="line">                return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//测试类</span><br><span class="line">public class FactoryPattenDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ShapeFactory factory = new ShapeFactory();</span><br><span class="line">        Shape shape;</span><br><span class="line">        shape = factory.getShape(&quot;circle&quot;);</span><br><span class="line">        shape.draw();</span><br><span class="line">        shape = factory.getShape(&quot;square&quot;);</span><br><span class="line">        shape.draw();</span><br><span class="line">        shape = factory.getShape(&quot;rectangle&quot;);</span><br><span class="line">        shape.draw();</span><br><span class="line">        shape = factory.getShape(null);</span><br><span class="line">        if (shape == null)</span><br><span class="line">            System.out.println(&quot;没有创建图形对象&quot;);</span><br><span class="line">        shape = factory.getShape(&quot;aaa&quot;);</span><br><span class="line">        if (shape == null)</span><br><span class="line">            System.out.println(&quot;没有创建图形对象&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作业：</p><p>使用工厂模式创建 上衣、裤子、帽子对象。</p><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="一、概念：-2"><a href="#一、概念：-2" class="headerlink" title="一、概念："></a>一、概念：</h2><p>抽象工厂模式属于创建型模式。</p><p>适用：系统的产品多于一个产品族，而系统只会使用其中一个产品族。如：形状（三角形、圆形、方形）、颜色（红色、绿色、蓝色）、休闲服装（休闲上衣、休闲裤子、休闲帽子）、运动服装（运动上衣、运动裤子、运动帽子）</p><p>抽象工厂模式是围绕一个超级工厂创建其他工厂，该超级工厂又其他工厂的工厂。</p><p>应用：如QQ换皮肤</p><h2 id="二、范例：-1"><a href="#二、范例：-1" class="headerlink" title="二、范例："></a>二、范例：</h2><p>功能：定义对象，创建形状（三角形、圆形、方形）、颜色（红色、绿色、蓝色）。</p><p><img src="C:\Users\wangchao\AppData\Roaming\Typora\typora-user-images\image-20220922154043925.png" alt="image-20220922154043925"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">//定义图形类</span><br><span class="line">interface Shape&#123;</span><br><span class="line">    public void draw();</span><br><span class="line">&#125;</span><br><span class="line">class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;我是圆形，我会画圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Square implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;我是方形，我会画方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Rectangle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;我是三角形，我会画三角形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义颜色类</span><br><span class="line">interface Color&#123;</span><br><span class="line">    public void fill();</span><br><span class="line">&#125;</span><br><span class="line">class Red implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;我是红色，我会填充红色&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Green implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;我是绿色，我会填充绿色&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Blue implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;我是蓝色，我会填充蓝色&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义抽象工厂类</span><br><span class="line">abstract class AbstractFactory&#123;</span><br><span class="line">    public Shape getShape(String name) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    public Color getColor(String name) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义图形工厂类</span><br><span class="line">class ShapeFactory extends AbstractFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Shape getShape(String name) &#123;</span><br><span class="line">        if (name == null)</span><br><span class="line">            return null;</span><br><span class="line">        switch (name)&#123;</span><br><span class="line">            case &quot;circle&quot;:</span><br><span class="line">                return new Circle();</span><br><span class="line">            case &quot;square&quot;:</span><br><span class="line">                return new Square();</span><br><span class="line">            case &quot;rectangle&quot;:</span><br><span class="line">                return new Rectangle();</span><br><span class="line">            default:</span><br><span class="line">                return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义颜色工厂类</span><br><span class="line">class ColorFactory extends AbstractFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Color getColor(String name) &#123;</span><br><span class="line">        if (name == null)</span><br><span class="line">            return null;</span><br><span class="line">        switch (name)&#123;</span><br><span class="line">            case &quot;red&quot;:</span><br><span class="line">                return new Red();</span><br><span class="line">            case &quot;green&quot;:</span><br><span class="line">                return new Green();</span><br><span class="line">            case &quot;blue&quot;:</span><br><span class="line">                return new Blue();</span><br><span class="line">            default:</span><br><span class="line">                return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义超级工厂类</span><br><span class="line">class FactoryProducer&#123;</span><br><span class="line">    public AbstractFactory getFactory(String name)&#123;</span><br><span class="line">        if (name == null)</span><br><span class="line">            return null;</span><br><span class="line">        switch (name)&#123;</span><br><span class="line">            case &quot;shape&quot;:</span><br><span class="line">                return new ShapeFactory();</span><br><span class="line">            case &quot;color&quot;:</span><br><span class="line">                return new ColorFactory();</span><br><span class="line">            default:</span><br><span class="line">                return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AbstractFactoryPatternDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FactoryProducer factoryProducer = new FactoryProducer();</span><br><span class="line">        AbstractFactory shapeFactory = factoryProducer.getFactory(&quot;shape&quot;);</span><br><span class="line">        Shape circle = shapeFactory.getShape(&quot;circle&quot;);</span><br><span class="line">        circle.draw();</span><br><span class="line">        Shape square = shapeFactory.getShape(&quot;square&quot;);</span><br><span class="line">        square.draw();</span><br><span class="line">        Shape rectangle = shapeFactory.getShape(&quot;rectangle&quot;);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作业：使用抽象工厂模式创建 休闲服装（休闲上衣、休闲裤子、休闲帽子）、运动服装（运动上衣、运动裤子、运动帽子）</p><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="一、概念：-3"><a href="#一、概念：-3" class="headerlink" title="一、概念："></a>一、概念：</h2><p>原型模式是创建型模式。</p><p><strong>适用：对一个存在的对象进行克隆时，适用该模式。</strong></p><h2 id="二、范例：-2"><a href="#二、范例：-2" class="headerlink" title="二、范例："></a>二、范例：</h2><p>​同一个类 同一个包      不同包有继承关系不同包无继承关系</p><p>public okokokok</p><p>protected  okokokno</p><p>默认okoknono</p><p>privateoknonono</p><p>​</p><p> protected  Object  clone();</p><p>创建并返回此对象的副本。</p><p>使用clone：</p><p>1、因为访问权限的原因，需要对clone方法重写。</p><p>2、因为语法要求，需要实现Cloneable接口。</p><p>子类中对父类中的方法进行重写时，访问权限要大于等于父类方法的访问权限。</p><p>一个类实现<code>Cloneable</code>接口，以指示<a href="../../java/lang/Object.html#clone--"><code>Object.clone()</code></a>方法，该方法对于该类的实例进行现场复制是合法的。</p><p>在不实现<code>Cloneable</code>接口的实例上调用对象的克隆方法导致抛出异常<code>CloneNotSupportedException</code>  。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class Student implements Cloneable&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private float score;</span><br><span class="line"></span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Student(int id, String name, int age, float score) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &quot;, score=&quot; + score +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getScore() &#123;</span><br><span class="line">        return score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setScore(float score) &#123;</span><br><span class="line">        this.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = new Student(1001, &quot;zhangsan&quot;, 23, 99);</span><br><span class="line">Student s2;</span><br><span class="line"></span><br><span class="line">s2 = (Student) s1.clone();</span><br><span class="line"></span><br><span class="line">System.out.println(s1);</span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure><h2 id="三、深复制和浅复制"><a href="#三、深复制和浅复制" class="headerlink" title="三、深复制和浅复制"></a>三、深复制和浅复制</h2><p>浅复制：只复制成员变量中的值。</p><p>深复制：除了复制成员变量的值，还要复制成员变量所引用的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MyDate&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;MyDate&#123;&quot; +</span><br><span class="line">                &quot;year=&quot; + year +</span><br><span class="line">                &quot;, month=&quot; + month +</span><br><span class="line">                &quot;, day=&quot; + day +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Student&#123;</span><br><span class="line">    int id;</span><br><span class="line">    float score;</span><br><span class="line">    String name;</span><br><span class="line">    MyDate birth;</span><br><span class="line"></span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Student(int id, float score, String name, MyDate birth) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.score = score;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, score=&quot; + score +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, birth=&quot; + birth +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、通过clone方法实现深复制"><a href="#四、通过clone方法实现深复制" class="headerlink" title="四、通过clone方法实现深复制"></a>四、通过clone方法实现深复制</h2><p>1、对类类型的成员变量对应的类重写clone方法，实现cloneable接口。</p><p>2、在该类的clone方法中完成以下操作：克隆该类中类型成员变量引用的对象；克隆该类对象；该类对象的类类型变量引用新克隆的对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class MyDate implements Cloneable&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        return super.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;MyDate&#123;&quot; +</span><br><span class="line">                &quot;year=&quot; + year +</span><br><span class="line">                &quot;, month=&quot; + month +</span><br><span class="line">                &quot;, day=&quot; + day +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Cloneable&#123;</span><br><span class="line">    int id;</span><br><span class="line">    float score;</span><br><span class="line">    String name;</span><br><span class="line">    MyDate birth;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object clone() throws CloneNotSupportedException &#123;</span><br><span class="line">        MyDate b = (MyDate) birth.clone();</span><br><span class="line">        Student s = (Student) super.clone();</span><br><span class="line">        s.birth = b;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Student()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public Student(int id, float score, String name, MyDate birth) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.score = score;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, score=&quot; + score +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, birth=&quot; + birth +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class MyTest &#123;</span><br><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span><br><span class="line">        MyDate date = new MyDate();</span><br><span class="line">        date.year = 1988;</span><br><span class="line">        date.month = 11;</span><br><span class="line">        date.day = 22;</span><br><span class="line">        Student s1 = new Student(1001, 99, &quot;zhangsan&quot;, date);</span><br><span class="line"></span><br><span class="line">        Student s2 = (Student) s1.clone();</span><br><span class="line"></span><br><span class="line">        //测试深复制</span><br><span class="line">        s2.birth.year = 2000;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、通过IO流实现深复制"><a href="#五、通过IO流实现深复制" class="headerlink" title="五、通过IO流实现深复制"></a>五、通过IO流实现深复制</h2><h3 id="1、回顾："><a href="#1、回顾：" class="headerlink" title="1、回顾："></a>1、回顾：</h3><p>内存中的数据和文件中的数据进行传输：（节点流）</p><p>FileIInputStream</p><p>FileOutputStream</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class FileStreamTest &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        FileOutputStream out = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        out.write(&quot;你好&quot;.getBytes());</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        FileInputStream in = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        byte[] b = new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        len = in.read(b);</span><br><span class="line">        String s = new String(b, 0, len);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存中的数据和缓冲区的数据进行传输：（节点流）</p><p>ByteArrayInputStream</p><p>ByteArrayOutputStream</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayStreamTest &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //创建该对象时自动创建缓冲区</span><br><span class="line">        ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="line">        out.write(&quot;星期四&quot;.getBytes());</span><br><span class="line">        //获取流对象对应的缓冲区</span><br><span class="line">        byte[] b = out.toByteArray();</span><br><span class="line">        String s = new String(b);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        //定义了一个缓冲区</span><br><span class="line">        byte[] b1;</span><br><span class="line">        b1 = &quot;十一假期来临了&quot;.getBytes();</span><br><span class="line">        ByteArrayInputStream in = new ByteArrayInputStream(b1);</span><br><span class="line">        //定义了内存空间</span><br><span class="line">        byte[] data = new byte[1024];</span><br><span class="line">        int len ;</span><br><span class="line">        len = in.read(data);</span><br><span class="line">        s = new String(data, 0, len);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象和字节之间的转换：（处理流）</p><p>注意：对象要实现Serializable接口。</p><p>ObjectInputStream</p><p>ObjectOutputStream</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Serializable &#123;</span><br><span class="line">    int id;</span><br><span class="line">    String name;</span><br><span class="line">    float score;</span><br><span class="line"></span><br><span class="line">    public Student(int id, String name, float score) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student&#123;&quot; +</span><br><span class="line">                &quot;id=&quot; + id +</span><br><span class="line">                &quot;, name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, score=&quot; + score +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ObjectStreamTeest &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        Student s1 = new Student(1001, &quot;aaa&quot;, 99);</span><br><span class="line">        FileOutputStream fout = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        ObjectOutputStream oout = new ObjectOutputStream(fout);</span><br><span class="line">        oout.writeObject(s1);</span><br><span class="line">        oout.close();</span><br><span class="line">        fout.close();</span><br><span class="line"></span><br><span class="line">        FileInputStream fin = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        ObjectInputStream oin = new ObjectInputStream(fin);</span><br><span class="line">        Student s2;</span><br><span class="line">        s2 = (Student) oin.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用IO流实现深复制："><a href="#2、使用IO流实现深复制：" class="headerlink" title="2、使用IO流实现深复制："></a>2、使用IO流实现深复制：</h3><p>通过文件作为中转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class DeepCopy01 &#123;</span><br><span class="line">    public static Object deepCopy(Object obj) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        //将学生对象写入到文件中</span><br><span class="line">        FileOutputStream fout = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        ObjectOutputStream oout = new ObjectOutputStream(fout);</span><br><span class="line">        oout.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        //从文件中读取学生对象</span><br><span class="line">        FileInputStream fin = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        ObjectInputStream oin = new ObjectInputStream(fin);</span><br><span class="line">        Object s2 = oin.readObject();</span><br><span class="line"></span><br><span class="line">        return s2;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        //创建学生对象</span><br><span class="line">        MyDate date = new MyDate(1988, 11, 22);</span><br><span class="line">        Student s1 = new Student(1001, &quot;张三&quot;, 88.5f, date);</span><br><span class="line">        //将学生对象写入到文件中</span><br><span class="line">        FileOutputStream fout = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        ObjectOutputStream oout = new ObjectOutputStream(fout);</span><br><span class="line">        oout.writeObject(s1);</span><br><span class="line">        //从文件中读取学生对象</span><br><span class="line">        FileInputStream fin = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        ObjectInputStream oin = new ObjectInputStream(fin);</span><br><span class="line">        Student s2 = (Student)oin.readObject();</span><br><span class="line"></span><br><span class="line">        //测试深复制</span><br><span class="line">        s2.birthday.year = 2000;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过缓冲区作为中转：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class DeepCopy02 &#123;</span><br><span class="line">    public static &lt;T extends Serializable&gt; T deepCopy(T obj) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        //将对象写入到缓冲区</span><br><span class="line">        ByteArrayOutputStream bout = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oout = new ObjectOutputStream(bout);</span><br><span class="line">        oout.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        //从缓冲区中读取对象</span><br><span class="line">        //获取bout中的缓冲区</span><br><span class="line">        byte[] bytes = bout.toByteArray();</span><br><span class="line">        //使用bout中的缓冲区初始化bin</span><br><span class="line">        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);</span><br><span class="line">        ObjectInputStream oin = new ObjectInputStream(bin);</span><br><span class="line">        T o = (T)oin.readObject();</span><br><span class="line"></span><br><span class="line">        return o;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        //创建学生对象</span><br><span class="line">        MyDate date = new MyDate(1988, 11, 22);</span><br><span class="line">        Student s1 = new Student(1001, &quot;张三&quot;, 88.5f, date);</span><br><span class="line">        //调用deepCopy方法</span><br><span class="line">        Student s2 = (Student) deepCopy(s1);</span><br><span class="line"></span><br><span class="line">        //测试深复制</span><br><span class="line">        s2.birthday.year = 2000;</span><br><span class="line"></span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="一、概念：-4"><a href="#一、概念：-4" class="headerlink" title="一、概念："></a>一、概念：</h2><p>建造者模式属于创建型模式。<strong>使用多个简单对象，一步一步构建成一个复杂的对象。</strong></p><p>这个复杂对象的各个部分会经常出现剧烈的变化，但将他们组合在一起的算法相对稳定。</p><p>将变与不变分离。</p><p>与工厂模式的区别：建造者模式更加关注于零件装配的顺序。</p><h2 id="二、范例：-3"><a href="#二、范例：-3" class="headerlink" title="二、范例："></a>二、范例：</h2><img src="C:\Users\wangchao\Desktop\建造模式.png" alt="建造模式" style="zoom: 50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">//创建条目接口Item</span><br><span class="line">interface Item&#123;</span><br><span class="line">    public String name();</span><br><span class="line">    public float price();</span><br><span class="line">    public String pack();</span><br><span class="line">&#125;</span><br><span class="line">//创建抽象汉堡类Burger</span><br><span class="line">abstract class Burger implements Item&#123;</span><br><span class="line">    public String pack()&#123;</span><br><span class="line">        return &quot;纸盒子&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建抽象冷饮类ColdDrink</span><br><span class="line">abstract class ColdDrink implements Item&#123;</span><br><span class="line">    public String pack()&#123;</span><br><span class="line">        return &quot;瓶子&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建蔬菜汉堡类VegBurger</span><br><span class="line">class VegBurger extends Burger&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String name() &#123;</span><br><span class="line">        return &quot;蔬菜汉堡&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public float price() &#123;</span><br><span class="line">        return 5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建鸡肉汉堡类ChickenBurger</span><br><span class="line">class ChickenBurger extends Burger&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String name() &#123;</span><br><span class="line">        return &quot;鸡肉汉堡&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public float price() &#123;</span><br><span class="line">        return 10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建百事可乐类Pegis</span><br><span class="line">class Pegis extends ColdDrink&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String name() &#123;</span><br><span class="line">        return &quot;百事可乐&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public float price() &#123;</span><br><span class="line">        return 3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建可口可乐类Coke</span><br><span class="line">class Coke extends ColdDrink&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String name() &#123;</span><br><span class="line">        return &quot;可口可乐&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public float price() &#123;</span><br><span class="line">        return 4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建套餐类Meal</span><br><span class="line">class Meal&#123;</span><br><span class="line">    private List&lt;Item&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    //给套餐中添加条目</span><br><span class="line">    public void addItem(Item item)&#123;</span><br><span class="line">        list.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    //显示套餐条目的名称</span><br><span class="line">    public void showName()&#123;</span><br><span class="line">        System.out.println(&quot;套餐商品名：&quot;);</span><br><span class="line">        for (Item item: list)&#123;</span><br><span class="line">            String name = item.name();</span><br><span class="line">            System.out.println(&quot;\t&quot; + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //显示套餐的总价格</span><br><span class="line">    public void showPrice()&#123;</span><br><span class="line">        System.out.print(&quot;套餐价格：&quot;);</span><br><span class="line">        float total = 0;</span><br><span class="line">        for (Item item: list)&#123;</span><br><span class="line">            float price = item.price();</span><br><span class="line">            total += price;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//创建生产套餐类MealBuilder</span><br><span class="line">class MealBuilder&#123;</span><br><span class="line">    //生产套餐一</span><br><span class="line">    public Meal builderMeal01()&#123;</span><br><span class="line">        Meal meal = new Meal();</span><br><span class="line">        meal.addItem(new ChickenBurger());</span><br><span class="line">        meal.addItem(new Coke());</span><br><span class="line">        return  meal;</span><br><span class="line">    &#125;</span><br><span class="line">    //生产套餐二</span><br><span class="line">    public Meal builderMeal02()&#123;</span><br><span class="line">        Meal meal = new Meal();</span><br><span class="line">        meal.addItem(new VegBurger());</span><br><span class="line">        meal.addItem(new Coke());</span><br><span class="line">        meal.addItem(new Pegis());</span><br><span class="line">        return meal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class BuilerPatternDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MealBuilder builder = new MealBuilder();</span><br><span class="line">        Meal meal;</span><br><span class="line"></span><br><span class="line">        meal = builder.builderMeal01();</span><br><span class="line">        meal.showName();</span><br><span class="line">        meal.showPrice();</span><br><span class="line"></span><br><span class="line">        meal = builder.builderMeal02();</span><br><span class="line">        meal.showName();</span><br><span class="line">        meal.showPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h1><h2 id="一、概念：-5"><a href="#一、概念：-5" class="headerlink" title="一、概念："></a>一、概念：</h2><p>桥接模式：<strong>将抽象部分和它的实现部分分离开来，使他们都可以独立变化。</strong></p><p>抽象化：将复杂物体的一个或几个特性抽取出来的过程。</p><p>实现化：针对抽象化给出的具体实现。实现化使对抽象化事务的进一步具体化。</p><p><strong>桥接模式将继承关系转化为关联关系，这样可以降低类与类之间的耦合性，从而减少系统中类的数量。</strong></p><p>优点：分离抽象接口及其实现部分，提高了比继承更好的解决方案；提高了系统的可扩展性；</p><p>缺点：桥接模式的引入会增加系统的理解和设计难度。</p><h2 id="二、范例：-4"><a href="#二、范例：-4" class="headerlink" title="二、范例："></a>二、范例：</h2><p>功能：定义对象，调用方法，输出使用什么颜色填充什么形状。（红、绿、蓝）（圆、方、矩）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">//定义形状抽象类</span><br><span class="line">abstract class Shape&#123;</span><br><span class="line">    protected Color color;</span><br><span class="line">    abstract public void draw();</span><br><span class="line">    public void setColor(Color color)&#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义圆形</span><br><span class="line">class Circle extends Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        color.fill(&quot;圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义方形</span><br><span class="line">class Square extends Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        color.fill(&quot;方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义矩形</span><br><span class="line">class Rectangle extends Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        color.fill(&quot;矩形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义颜色接口</span><br><span class="line">interface Color&#123;</span><br><span class="line">    public void fill(String shape);</span><br><span class="line">&#125;</span><br><span class="line">//定义红颜色</span><br><span class="line">class Red implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill(String shape) &#123;</span><br><span class="line">        System.out.println(&quot;用红色画&quot; + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义绿颜色</span><br><span class="line">class Green implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill(String shape) &#123;</span><br><span class="line">        System.out.println(&quot;用绿色画&quot; + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义蓝颜色</span><br><span class="line">class Blue implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill(String shape) &#123;</span><br><span class="line">        System.out.println(&quot;用蓝色画&quot; + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//定义黄色</span><br><span class="line">class Yellow implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill(String shape) &#123;</span><br><span class="line">        System.out.println(&quot;用黄色画&quot; + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Example &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Circle c = new Circle();</span><br><span class="line">        Square s = new Square();</span><br><span class="line">        Rectangle r = new Rectangle();</span><br><span class="line"></span><br><span class="line">        Green green = new Green();</span><br><span class="line">        Red red = new Red();</span><br><span class="line">        Blue blue = new Blue();</span><br><span class="line">        Yellow yellow = new Yellow();</span><br><span class="line"></span><br><span class="line">        c.setColor(blue);</span><br><span class="line">        c.draw();</span><br><span class="line">        r.setColor(green);</span><br><span class="line">        r.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><h2 id="一、概念：-6"><a href="#一、概念：-6" class="headerlink" title="一、概念："></a>一、概念：</h2><p>组合模式是结构型模式。又称为部分整体模式。</p><p><strong>组合模式依据 树形结构 来组织对象，用来表示部分和整体的层次关系。</strong></p><p>组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p>组合模式模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素。</p><p><strong>树枝和树叶实现统一的接口，树枝和树叶内部组合该接口。</strong></p><h2 id="二、范例：-5"><a href="#二、范例：-5" class="headerlink" title="二、范例："></a>二、范例：</h2><p>功能：打印大学部门的信息（名称、地址）。</p><p>榆林学院—-艺术学院—音乐系</p><p>​美术系</p><p>​生命学院—-生物系</p><p>​基因系</p><p>​化工学院—-煤炭系</p><p>​石油系</p><p>​计算机学院–网路系</p><p>​软工系</p><p>​数据库系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class Component&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String address;</span><br><span class="line">    List&lt;Component&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public Component(String name, String address) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void show()&#123;</span><br><span class="line">        System.out.println(name + &quot; &quot; + address);</span><br><span class="line">        for (Component c: list)&#123;</span><br><span class="line">            c.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void add(Component c)&#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ExmapleTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Component yulin = new Component(&quot;榆林学院&quot;, &quot;榆林&quot;);</span><br><span class="line"></span><br><span class="line">        Component yishu = new Component(&quot;艺术学院&quot;, &quot;一号楼&quot;);</span><br><span class="line">        Component yinyue = new Component(&quot;音乐系&quot;, &quot;一号楼一层&quot;);</span><br><span class="line">        Component meishu = new Component(&quot;美术系&quot;, &quot;一号楼二层&quot;);</span><br><span class="line">        yishu.add(yinyue);</span><br><span class="line">        yishu.add(meishu);</span><br><span class="line"></span><br><span class="line">        Component shengming = new Component(&quot;生命学院&quot;, &quot;二号楼&quot;);</span><br><span class="line">        Component shengwu = new Component(&quot;生物系&quot;, &quot;二号楼一层&quot;);</span><br><span class="line">        Component jiyin = new Component(&quot;基因系&quot;, &quot;二号楼二层&quot;);</span><br><span class="line">        shengming.add(shengwu);</span><br><span class="line">        shengming.add(jiyin);</span><br><span class="line"></span><br><span class="line">        Component huagong = new Component(&quot;化工学院&quot;, &quot;三号楼&quot;);</span><br><span class="line">        Component meitan = new Component(&quot;煤炭系&quot;, &quot;三号楼一层&quot;);</span><br><span class="line">        Component shiyou = new Component(&quot;石油系&quot;, &quot;三号楼二层&quot;);</span><br><span class="line">        huagong.add(meitan);</span><br><span class="line">        huagong.add(shiyou);</span><br><span class="line"></span><br><span class="line">        Component jisuanji = new Component(&quot;计算机学院&quot;, &quot;四号楼&quot;);</span><br><span class="line">        Component wangluo = new Component(&quot;网络系&quot;, &quot;四号楼一楼&quot;);</span><br><span class="line">        Component ruangong = new Component(&quot;软工系&quot;, &quot;四号楼二楼&quot;);</span><br><span class="line">        Component shujuku = new Component(&quot;数据库系&quot;, &quot;四号楼三楼&quot;);</span><br><span class="line">        jisuanji.add(wangluo);</span><br><span class="line">        jisuanji.add(ruangong);</span><br><span class="line">        jisuanji.add(shujuku);</span><br><span class="line"></span><br><span class="line">        yulin.add(yishu);</span><br><span class="line">        //yulin.add(shengming);</span><br><span class="line">        huagong.add(shengming);</span><br><span class="line">        yulin.add(huagong);</span><br><span class="line">        yulin.add(jisuanji);</span><br><span class="line"></span><br><span class="line">        yulin.show();</span><br><span class="line">        System.out.println(&quot;===========&quot;);</span><br><span class="line">        jisuanji.show();</span><br><span class="line">        System.out.println(&quot;============&quot;);</span><br><span class="line">        shiyou.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作业：</p><p>一层：榆林学院（名称、地址）</p><p>二层：艺术学院等（名称、人数）</p><p>三层：音乐系等（名称、系主任名字）</p><p>接口：show()</p><h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><h2 id="一、概念：-7"><a href="#一、概念：-7" class="headerlink" title="一、概念："></a>一、概念：</h2><p>适配器模式属于结构型模式。</p><p><strong>适配器模式是作为两个不兼容接口之间的桥梁。负责加入独立的不兼容的接口功能。</strong></p><p><strong>将一个类的接口转换成为客户需要的另一个接口。</strong></p><p>主要解决在软件系统中，常常要将一些现有对象放到新的环境中，而新环境要求的接口是现有对象不能满足的</p><p>通过继承或依赖实现。推荐使用依赖方式实现。</p><p><strong>适配器模式继承或依赖已有的对象，实现想要的目标接口</strong>。</p><p><strong>适配器类要实现目标接口。</strong></p><h2 id="二、范例：-6"><a href="#二、范例：-6" class="headerlink" title="二、范例："></a>二、范例：</h2><p>功能：V5接口，提供5V电压；</p><p>V220V接口，提供220V电压；</p><p>一个插座实现V220接口，提供220V电压；</p><p>手机，充电功能，需要提供5V电压；</p><h3 id="1、继承："><a href="#1、继承：" class="headerlink" title="1、继承："></a>1、继承：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">interface V5&#123;</span><br><span class="line">    public void outputV5();</span><br><span class="line">&#125;</span><br><span class="line">interface V220&#123;</span><br><span class="line">    public void outputV220();</span><br><span class="line">&#125;</span><br><span class="line">class Chazuo implements V220&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void outputV220() &#123;</span><br><span class="line">        System.out.println(&quot;插座可以提供220V电压&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Phone&#123;</span><br><span class="line">    public void power(V5 v5)&#123;</span><br><span class="line">        v5.outputV5();</span><br><span class="line">        System.out.println(&quot;有了5v电压，开始充电&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Adapter extends Chazuo implements V5&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void outputV5() &#123;</span><br><span class="line">        outputV220();</span><br><span class="line">        System.out.println(&quot;获取了220v电压&quot;);</span><br><span class="line">        System.out.println(&quot;经过一系列的处理，将220v电压转换成了5v电压&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class AdapterTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Phone phone = new Phone();</span><br><span class="line">        Adapter adapter = new Adapter();</span><br><span class="line">        phone.power(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、依赖："><a href="#2、依赖：" class="headerlink" title="2、依赖："></a>2、依赖：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">interface V5&#123;</span><br><span class="line">    public void outputV5();</span><br><span class="line">&#125;</span><br><span class="line">interface V220&#123;</span><br><span class="line">    public void outputV220();</span><br><span class="line">&#125;</span><br><span class="line">class Chazuo implements V220 &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void outputV220() &#123;</span><br><span class="line">        System.out.println(&quot;插座可以提供220V电压&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Phone&#123;</span><br><span class="line">    public void power(V5 v5)&#123;</span><br><span class="line">        v5.outputV5();</span><br><span class="line">        System.out.println(&quot;有了5v电压，开始充电&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Adapter implements V5&#123;</span><br><span class="line">    Chazuo chazuo;</span><br><span class="line">    public Adapter(Chazuo chazuo)&#123;</span><br><span class="line">        this.chazuo = chazuo;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void outputV5() &#123;</span><br><span class="line">        chazuo.outputV220();</span><br><span class="line">        System.out.println(&quot;通过插座获取了220v电压&quot;);</span><br><span class="line">        System.out.println(&quot;经过一系列的处理，将220v电压转换成了5v电压&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class AdapterTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Chazuo chazuo = new Chazuo();</span><br><span class="line">        Adapter adapter = new Adapter(chazuo);</span><br><span class="line">        Phone phone = new Phone();</span><br><span class="line">        phone.power(adapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、接口适配器模式："><a href="#3、接口适配器模式：" class="headerlink" title="3、接口适配器模式："></a>3、接口适配器模式：</h3><p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现该接口，并对接口中的方法重写，方法体是空的方法体。那么该抽象类的子类可以选择性的覆盖父类的某些方法。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button.addMouseListener(new MouseAdapter() &#123;</span><br><span class="line">&#125;);</span><br><span class="line">MouseListener是接口，MouseAdapter是实现该接口的抽象类。</span><br></pre></td></tr></table></figure><h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><h2 id="一、-概念："><a href="#一、-概念：" class="headerlink" title="一、 概念："></a>一、 概念：</h2><p>装饰器模式是结构型模式。</p><p>装饰器模式是<strong>向一个现有类</strong> <strong>添加新的功能</strong>。<strong>它是作为现有类的一个包装。在保持原有类方法完整的前提下，提供新的功能。</strong></p><p>动态的给一个类增加一些新的功能，就增加功能来说，装饰器模式比生成子类更为灵活。</p><h2 id="二、-范例："><a href="#二、-范例：" class="headerlink" title="二、 范例："></a>二、 范例：</h2><p>功能：图像接口，派生出画圆形、画方形类。增加画红边的功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">//图形接口</span><br><span class="line">interface Shape&#123;</span><br><span class="line">    public void draw();</span><br><span class="line">&#125;</span><br><span class="line">//圆形</span><br><span class="line">class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//矩形</span><br><span class="line">class Rectangle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画矩形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//图形装饰器类</span><br><span class="line">abstract class ShapeDecorator implements Shape&#123;</span><br><span class="line">    protected Shape shape;</span><br><span class="line">    public ShapeDecorator(Shape shape)&#123;</span><br><span class="line">        this.shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//增加红色边框的图形装饰器类</span><br><span class="line">class RedShapeDecorator extends ShapeDecorator&#123;</span><br><span class="line">    public RedShapeDecorator(Shape shape)&#123;</span><br><span class="line">        super(shape);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        shape.draw();</span><br><span class="line">        drawRedBorder();</span><br><span class="line">    &#125;</span><br><span class="line">    private void drawRedBorder()&#123;</span><br><span class="line">        System.out.println(&quot;画红色的边框&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//增加玻璃相框的图形装饰器类</span><br><span class="line">class GlassShapeDecorator extends ShapeDecorator&#123;</span><br><span class="line">    public GlassShapeDecorator(Shape shape)&#123;</span><br><span class="line">        super(shape);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        shape.draw();</span><br><span class="line">        addGlass();</span><br><span class="line">    &#125;</span><br><span class="line">    private void addGlass()&#123;</span><br><span class="line">        System.out.println(&quot;增加玻璃相框&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class DecoratorTest &#123;</span><br><span class="line">    public static void show(ShapeDecorator shape)&#123;</span><br><span class="line">        shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Shape shape;</span><br><span class="line">        shape = new Circle();</span><br><span class="line">        shape.draw();</span><br><span class="line">        shape = new Rectangle();</span><br><span class="line">        shape.draw();</span><br><span class="line"></span><br><span class="line">        shape = new RedShapeDecorator(new Circle());</span><br><span class="line">        shape.draw();</span><br><span class="line">        shape = new RedShapeDecorator(new Rectangle());</span><br><span class="line">        shape.draw();</span><br><span class="line"></span><br><span class="line">        shape = new GlassShapeDecorator(new Circle());</span><br><span class="line">        shape.draw();</span><br><span class="line">        shape = new GlassShapeDecorator(new Rectangle());</span><br><span class="line">        shape.draw();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;============&quot;);</span><br><span class="line">        show(new RedShapeDecorator(new Circle()));</span><br><span class="line">        show(new GlassShapeDecorator(new Rectangle()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="一、概念：-8"><a href="#一、概念：-8" class="headerlink" title="一、概念："></a>一、概念：</h2><p>代理模式是结构型模式。</p><p>一个代理类代表另一个类的功能。</p><p><em><strong>代理模式为其他对象提供一种代理，以 控制 对这个对象的访问</strong></em>。</p><p>如：window系统种的快捷方式；火车票代售点；</p><p>通常会对远程对象、创建开销大的对象、需要安全控制的对象进行代理。</p><p>代理模式分为：静态代理、动态代理、Cglib代理。</p><p><strong>代理模式和适配器模式的区别：适配器模式是改变所考虑对象的接口，而代理类不改变被代理类的接口。</strong></p><p><strong>代理模式和装饰器模式 的区别：装饰器模式是为了增加功能，而代理模式是为了加以控制。</strong></p><h2 id="二、范例：-7"><a href="#二、范例：-7" class="headerlink" title="二、范例："></a>二、范例：</h2><p>功能：一个类提供对数组进行二分法查找。在调用该类的查找方法前要判断数组种的数据是否有序存储。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">interface Search&#123;</span><br><span class="line">    public int search(int[] arr, int data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BinaraySearch implements Search&#123;</span><br><span class="line">    @Override</span><br><span class="line">    //数组中的数据从小到大有序排列</span><br><span class="line">    public int search(int[] arr, int data) &#123;</span><br><span class="line">        int begin, end, mid;</span><br><span class="line">        begin = 0;</span><br><span class="line">        end = arr.length - 1;</span><br><span class="line">        while (end &gt;= begin)&#123;</span><br><span class="line">            mid = (begin + end) / 2;</span><br><span class="line">            if (arr[mid] == data)</span><br><span class="line">                return mid;</span><br><span class="line">            else if (arr[mid] &gt; data)</span><br><span class="line">                end = mid - 1;</span><br><span class="line">            else</span><br><span class="line">                begin = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class SearchProxy implements Search&#123;</span><br><span class="line">    private BinaraySearch binaraySearch;</span><br><span class="line">    public SearchProxy(BinaraySearch binaraySearch)&#123;</span><br><span class="line">        this.binaraySearch = binaraySearch;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int search(int[] arr, int data) &#123;</span><br><span class="line">        boolean b = judgeSmallToBig(arr);</span><br><span class="line">        if (b) &#123;</span><br><span class="line">            int pos = binaraySearch.search(arr, data);</span><br><span class="line">            return pos;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return -2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断数组中的数据是否是从小到大有序存储</span><br><span class="line">    private boolean judgeSmallToBig(int[] arr)&#123;</span><br><span class="line">        for (int i=0; i&lt;arr.length-1; i++)&#123;</span><br><span class="line">            if (arr[i] &gt; arr[i+1])</span><br><span class="line">                return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ProxyTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        BinaraySearch bs = new BinaraySearch();</span><br><span class="line">        SearchProxy sp = new SearchProxy(bs);</span><br><span class="line">        int[] arr = &#123;11, 22, 33, 44, 55, 66, 88, 77, 99, 100&#125;;</span><br><span class="line">        int pos = sp.search(arr, 88);</span><br><span class="line">        if (pos &gt;= 0)</span><br><span class="line">            System.out.println(&quot;查询的数据在数组中的&quot;+pos+&quot;位置&quot;);</span><br><span class="line">        if (pos == -1)</span><br><span class="line">            System.out.println(&quot;查询的数据没有在数组中&quot;);</span><br><span class="line">        if (pos == -2)</span><br><span class="line">            System.out.println(&quot;数组中的数据不是从小到大存储，不能使用该二分法查找&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h1><h2 id="一、概念：-9"><a href="#一、概念：-9" class="headerlink" title="一、概念："></a>一、概念：</h2><p>享元模式是结构型模式。</p><p><strong>享元模式主要用于减少创建对象的数量，以减少内存的占用，从而提高系统的效率。</strong></p><p><strong>享元模式尝试使用现有的同类对象，如果未找到匹配的对象，则创建新对象。</strong></p><p><strong>HashMap集合；一个工厂对象；</strong></p><h2 id="二、范例：-8"><a href="#二、范例：-8" class="headerlink" title="二、范例："></a>二、范例：</h2><p>功能：五个图形类，可以画五种图形（圆形、矩形、方形、三角形、椭圆形）；随机画5个图形。</p><p>补充：使用反射根据类名创建对象。</p><p>根据类名获取该类所对应的Class对象，使用Class类对象创建Constructor对象，使用Constructor对象创建该类对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">    public A()&#123;&#125;</span><br><span class="line">    public void f()&#123;</span><br><span class="line">        System.out.println(&quot;=======&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ClassTest &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Class&lt;A&gt; ac = (Class&lt;A&gt;)Class.forName(&quot;cn.tedu.A&quot;);</span><br><span class="line">        Constructor&lt;A&gt; constructor = ac.getConstructor();</span><br><span class="line">        A o = constructor.newInstance();</span><br><span class="line">        o.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">interface Shape&#123;</span><br><span class="line">    public void draw();</span><br><span class="line">&#125;</span><br><span class="line">class Circle implements Shape&#123;</span><br><span class="line">    public Circle()&#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Rectangle implements Shape&#123;</span><br><span class="line">    public Rectangle()&#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画矩形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Square implements Shape&#123;</span><br><span class="line">    public Square()&#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Triangle implements Shape&#123;</span><br><span class="line">    public Triangle()&#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画三角形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Ellipse implements Shape&#123;</span><br><span class="line">    public Ellipse()&#123;&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;画椭圆形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class ShapeFactory&#123;</span><br><span class="line">    private HashMap&lt;String, Shape&gt; map = new HashMap&lt;String, Shape&gt;();</span><br><span class="line"></span><br><span class="line">    public Shape getShape(String name) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Shape shape = map.get(name);</span><br><span class="line">        if (shape != null)&#123;</span><br><span class="line">            System.out.println(&quot;集合中已经有了&quot;+name+&quot;对象，不再创建了&quot;);</span><br><span class="line">            return shape;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Class&lt;Shape&gt; ac = (Class&lt;Shape&gt;)Class.forName(&quot;cn.tedu.&quot; + name);</span><br><span class="line">            Constructor&lt;Shape&gt; constructor = ac.getConstructor();</span><br><span class="line">            Shape s = constructor.newInstance();</span><br><span class="line">            map.put(name, s);</span><br><span class="line">            System.out.println(&quot;创建了一个&quot;+name+&quot;对象&quot;);</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class FlyweightTest &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        ShapeFactory factory = new ShapeFactory();</span><br><span class="line">        String[] name = &#123;&quot;Circle&quot;, &quot;Rectangle&quot;</span><br><span class="line">                , &quot;Triangle&quot;, &quot;Ellipse&quot;, &quot;Square&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        for (int i=0; i&lt;5; i++)&#123;</span><br><span class="line">            //random()：[0, 1)之间的随机小数。</span><br><span class="line">            //在[0, 4]之间取随机数。</span><br><span class="line">            int j = (int)(Math.random() * 5);</span><br><span class="line">            Shape shape = factory.getShape(name[j]);</span><br><span class="line">            shape.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="一、-概念：-1"><a href="#一、-概念：-1" class="headerlink" title="一、 概念："></a>一、 概念：</h2><p>策略模式是行为型模式。</p><p><strong>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的context对象，策略对象改变context对象的执行算法。一个类的行为或算法可以在运行时更改。</strong></p><p><strong>定义一个个的算法，将他们一个个封装起来，并且是他们可以相互替换。实现同一个接口。</strong></p><h2 id="二、-范例：-1"><a href="#二、-范例：-1" class="headerlink" title="二、 范例："></a>二、 范例：</h2><p>功能：定义一个类，该类实现排序算法。可以按照从小到大排序、从大到小排序、根据平方值从小到大排序、根据平方值从大道小排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">interface Compare&#123;</span><br><span class="line">    public boolean compare(int x, int y);</span><br><span class="line">&#125;</span><br><span class="line">class FromSmallToBig implements Compare&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean compare(int x, int y) &#123;</span><br><span class="line">        if (x &gt; y)</span><br><span class="line">            return true;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class FromBigToSmall implements Compare&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean compare(int x, int y) &#123;</span><br><span class="line">        if (x &lt; y)</span><br><span class="line">            return true;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class PowFromSmallToBig implements Compare&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean compare(int x, int y) &#123;</span><br><span class="line">        if (x * x &gt; y * y)</span><br><span class="line">            return true;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class PowFromBigToSmall implements Compare&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean compare(int x, int y) &#123;</span><br><span class="line">        if (x * x &lt; y * y)</span><br><span class="line">            return true;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class SortOper&#123;</span><br><span class="line">    private Compare com;</span><br><span class="line">    public SortOper(Compare com)&#123;</span><br><span class="line">        this.com = com;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setCom(Compare com)&#123;</span><br><span class="line">        this.com = com;</span><br><span class="line">    &#125;</span><br><span class="line">    public void sort(int[] arr)&#123;</span><br><span class="line">        int len = arr.length;</span><br><span class="line">        for (int i=0; i&lt;len-1; i++)&#123;</span><br><span class="line">            for (int j=0; j&lt;len-i-1; j++)&#123;</span><br><span class="line">                //if (arr[j] &gt; arr[j+1])&#123;</span><br><span class="line">                //FromSmallToBig compare if (x&gt;y)  return true</span><br><span class="line">                //if (arr[j] &lt; arr[j+1])</span><br><span class="line">                //FromBigToSmall compare if (x&lt;y)  return true</span><br><span class="line">                if (com.compare(arr[j], arr[j+1]) == true)&#123;</span><br><span class="line">                    int t;</span><br><span class="line">                    t = arr[j];</span><br><span class="line">                    arr[j] = arr[j+1];</span><br><span class="line">                    arr[j+1] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class SortTest &#123;</span><br><span class="line">    static void show(int[] arr)&#123;</span><br><span class="line">        for (int a: arr)&#123;</span><br><span class="line">            System.out.print(a+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;10,41,-7,89,23,-49,20,17,-41,30,27&#125;;</span><br><span class="line">        FromSmallToBig fromSmallToBig = new FromSmallToBig();</span><br><span class="line">        FromBigToSmall fromBigToSmall = new FromBigToSmall();</span><br><span class="line">        PowFromSmallToBig powFromSmallToBig = new PowFromSmallToBig();</span><br><span class="line">        PowFromBigToSmall powFromBigToSmall = new PowFromBigToSmall();</span><br><span class="line"></span><br><span class="line">        SortOper sortOper = new SortOper(fromSmallToBig);</span><br><span class="line">        sortOper.sort(arr);</span><br><span class="line">        show(arr);</span><br><span class="line">        sortOper.setCom(fromBigToSmall);</span><br><span class="line">        sortOper.sort(arr);</span><br><span class="line">        show(arr);</span><br><span class="line">        sortOper.setCom(powFromSmallToBig);</span><br><span class="line">        sortOper.sort(arr);</span><br><span class="line">        show(arr);</span><br><span class="line">        sortOper.setCom(powFromBigToSmall);</span><br><span class="line">        sortOper.sort(arr);</span><br><span class="line">        show(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="一、-概念：-2"><a href="#一、-概念：-2" class="headerlink" title="一、 概念："></a>一、 概念：</h2><p><strong>观察者模式是定义对象间的一种 一对多 的依赖关系。当一个对象的状态发生改变时，所有依赖于他的对象都得到通知，并被自动更新。</strong></p><p><strong>一个对象（目标对象）的状态发生改变，所有依赖对象（观察者对象）都得到通知，进行广播通知。</strong></p><p>目标对象中包含观察者对象。目标对象中有一个List集合，该集合中包含多个观察者对象。观察者对象中有一个目标对象。</p><h2 id="二、-范例：-2"><a href="#二、-范例：-2" class="headerlink" title="二、 范例："></a>二、 范例：</h2><p>气象站：测温度</p><p>163、搜狐、百度网站实时显示温度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">class Subject&#123;</span><br><span class="line">    //目标对象中有多个观察者对象。</span><br><span class="line">    //目标对象中有观察者对象，才可以给观察者对象发送通知，并更新数据。</span><br><span class="line">    private List&lt;Observer&gt; list = new ArrayList&lt;Observer&gt;();</span><br><span class="line">    private int state;</span><br><span class="line"></span><br><span class="line">    public int getState()&#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setState(int state)&#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    //将观察者对象添加到数组中。</span><br><span class="line">    public void attach(Observer observer)&#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    //通知所有的观察者对象，更新观察者对象的数据</span><br><span class="line">    public void notifyAllObservers()&#123;</span><br><span class="line">        for (Observer observer: list)&#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Observer&#123;</span><br><span class="line">    //观察者对象中包含了目标对象。</span><br><span class="line">    //观察者对象中有了目标对象，才能将自己添加到目标对象的集合中，才能获取目标对象中的状态值。</span><br><span class="line">    protected Subject subject;</span><br><span class="line">    public Observer(Subject subject)&#123;</span><br><span class="line">        this.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">    abstract public void update();</span><br><span class="line">&#125;</span><br><span class="line">class Wangyi extends Observer&#123;</span><br><span class="line">    public Wangyi(Subject subject)&#123;</span><br><span class="line">        super(subject);</span><br><span class="line">        //将观察者对象自己添加到目标对象的集合中</span><br><span class="line">        subject.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;网易网站显示温度：&quot; + subject.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Souhu extends Observer&#123;</span><br><span class="line">    public Souhu(Subject subject)&#123;</span><br><span class="line">        super(subject);</span><br><span class="line">        //将观察者对象自己添加到目标对象的集合中</span><br><span class="line">        subject.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;搜狐网站显示温度：&quot; + subject.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Baidu extends Observer&#123;</span><br><span class="line">    public Baidu(Subject subject)&#123;</span><br><span class="line">        super(subject);</span><br><span class="line">        //将观察者对象自己添加到目标对象的集合中</span><br><span class="line">        subject.attach(this);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;百度网站显示温度：&quot; + subject.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ObserverPatternDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Subject subject = new Subject();</span><br><span class="line">        Baidu baidu = new Baidu(subject);</span><br><span class="line">        Wangyi wangyi = new Wangyi(subject);</span><br><span class="line">        Souhu souhu = new Souhu(subject);</span><br><span class="line"></span><br><span class="line">        subject.setState(10);</span><br><span class="line">        subject.setState(20);</span><br><span class="line">        subject.setState(30);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h1><h2 id="一、-概念：-3"><a href="#一、-概念：-3" class="headerlink" title="一、 概念："></a>一、 概念：</h2><p>状态模式是行为型模式。</p><p><strong>在状态模式中，创建表示各种状态的对象，以及一个行为随着状态对象改变而改变的context对象。</strong></p><p>context对象的行为依赖于他的状态(属性)，并且可以根据他的状态改变而改变它的相关行为。</p><p><strong>代码中包含大量与对象状态有关的条件语句</strong>。</p><h2 id="二、-范例：-3"><a href="#二、-范例：-3" class="headerlink" title="二、 范例："></a>二、 范例：</h2><p>一个对象有四种状态—-创建状态、运行状态、阻塞状态、结束状态，四个状态之间会进行切换，不同的状态完成不同的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">interface State&#123;</span><br><span class="line">    public void dosomthing();</span><br><span class="line">    public void setStateToContext(Context context);</span><br><span class="line">&#125;</span><br><span class="line">class StateDemo01 implements State&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void dosomthing() &#123;</span><br><span class="line">        System.out.println(&quot;状态 demo01 完成的操作============&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void setStateToContext(Context context) &#123;</span><br><span class="line">        context.setState(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class StateDemo02 implements State&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void dosomthing() &#123;</span><br><span class="line">        System.out.println(&quot;状态 demo02 完成的操作============&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void setStateToContext(Context context) &#123;</span><br><span class="line">        context.setState(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class StateDemo03 implements State&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void dosomthing() &#123;</span><br><span class="line">        System.out.println(&quot;状态 demo03 完成的操作============&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void setStateToContext(Context context) &#123;</span><br><span class="line">        context.setState(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class StateDemo04 implements State&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void dosomthing() &#123;</span><br><span class="line">        System.out.println(&quot;状态 demo04 完成的操作============&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void setStateToContext(Context context) &#123;</span><br><span class="line">        context.setState(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Context&#123;</span><br><span class="line">    private State state;</span><br><span class="line">    public void setState(State state)&#123;</span><br><span class="line">        this.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    public State getState()&#123;</span><br><span class="line">        return state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class StateDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        StateDemo01 stateDemo01 = new StateDemo01();</span><br><span class="line">        StateDemo02 stateDemo02 = new StateDemo02();</span><br><span class="line">        StateDemo03 stateDemo03 = new StateDemo03();</span><br><span class="line">        StateDemo04 stateDemo04 = new StateDemo04();</span><br><span class="line">        Context context = new Context();</span><br><span class="line"></span><br><span class="line">        stateDemo01.setStateToContext(context);</span><br><span class="line">        context.getState().dosomthing();</span><br><span class="line">        stateDemo03.setStateToContext(context);</span><br><span class="line">        context.getState().dosomthing();</span><br><span class="line">        stateDemo02.setStateToContext(context);</span><br><span class="line">        context.getState().dosomthing();</span><br><span class="line">        stateDemo04.setStateToContext(context);</span><br><span class="line">        context.getState().dosomthing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><h2 id="一、概念：-10"><a href="#一、概念：-10" class="headerlink" title="一、概念："></a>一、概念：</h2><p>外观模式是结构型模式。</p><p><strong>外观模式隐藏系统的复杂性，向客户端提供一个可以访问系统的接口。</strong></p><p>外观模式为子系统中的一组接口提供一个一致的界面，外观模式定义一个高层接口，这个接口使得子系统更加容易使用。</p><h2 id="二、范例：-9"><a href="#二、范例：-9" class="headerlink" title="二、范例："></a>二、范例：</h2><p>会计、出纳、业务、保洁分别完成提供财务报表、支出工资、提供业务报表、打扫卫生功能；秘书和以上四个对象沟通。通过秘书实现以上四个对象完成的功能。总经理类是客户端，客户端通过秘书实现以上四个功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">class Kuaiji&#123;</span><br><span class="line">    public void accountTable()&#123;</span><br><span class="line">        System.out.println(&quot;会计提供财务报表&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Chuna&#123;</span><br><span class="line">    public void money()&#123;</span><br><span class="line">        System.out.println(&quot;支出工资&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Yewu&#123;</span><br><span class="line">    public void operate()&#123;</span><br><span class="line">        System.out.println(&quot;业务提供业务报表&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Baojie&#123;</span><br><span class="line">    public void clear()&#123;</span><br><span class="line">        System.out.println(&quot;打扫卫生&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Mishu&#123;</span><br><span class="line">    private Kuaiji kuaiji = new Kuaiji();</span><br><span class="line">    private Yewu yewu = new Yewu();</span><br><span class="line">    private Baojie baojie = new Baojie();</span><br><span class="line">    private Chuna chuna = new Chuna();</span><br><span class="line"></span><br><span class="line">    public void accountTable()&#123;</span><br><span class="line">        kuaiji.accountTable();</span><br><span class="line">    &#125;</span><br><span class="line">    public void operate()&#123;</span><br><span class="line">        yewu.operate();</span><br><span class="line">    &#125;</span><br><span class="line">    public void money()&#123;</span><br><span class="line">        chuna.money();</span><br><span class="line">    &#125;</span><br><span class="line">    public void clear()&#123;</span><br><span class="line">        baojie.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Manager &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Mishu  mishu = new Mishu();</span><br><span class="line">        mishu.accountTable();</span><br><span class="line">        mishu.clear();</span><br><span class="line">        mishu.operate();</span><br><span class="line">        mishu.money();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：电视机遥控器打开电视机，机顶盒遥控器打开机顶盒，音响遥控器打开音响，空调遥控器打开空调。定义总的遥控器，总的遥控器可以打开电视机、打开机顶盒、打开音响、打开空调、打开家庭影院（家庭影院包含电视机、音响、机顶盒）。定义测试类，在测试类中使用总的遥控器打开不同的设备。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加文章字数和阅读预估时长</title>
      <link href="/2023/08/17/%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E5%AD%97%E6%95%B0%E5%92%8C%E9%98%85%E8%AF%BB%E9%A2%84%E4%BC%B0%E6%97%B6%E9%95%BF/"/>
      <url>/2023/08/17/%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E5%AD%97%E6%95%B0%E5%92%8C%E9%98%85%E8%AF%BB%E9%A2%84%E4%BC%B0%E6%97%B6%E9%95%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="阅读优化"><a href="#阅读优化" class="headerlink" title="阅读优化"></a>阅读优化</h2><p>通过对他人博客的预览</p><p>总结使用方法和使用的样式</p><p>本人对博客阅读进行了比较深度的优化</p><p>包括：折叠主页面，添加文章字数统计，添加阅读预估时长统计以及添加图片放大功能</p> <span id="more"></span><h2 id="折叠页面"><a href="#折叠页面" class="headerlink" title="折叠页面"></a>折叠页面</h2><p>直接在主页面显示全部内容对于长博文不友好</p><p>而且主页变得很拥挤也不是个事</p><p>所以通过添加博文页面预览，即添加一个“查看全文”选项</p><p><img src="/images/content-7-1.png"></p><p>查阅Hexo的相关设置，发现<strong>没有了</strong>以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p>通过查询文档发现next（v7.7.1）已经没有以上代码</p><p>取而代之的是，在文章中插入此标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure><p>网页上的效果展示：</p><p><img src="/images/content-7-2.png"></p><h2 id="字数统计和阅读时长预估"><a href="#字数统计和阅读时长预估" class="headerlink" title="字数统计和阅读时长预估"></a>字数统计和阅读时长预估</h2><p>对于一个需要阅读的长博文</p><p>字数是博文最直观的数字呈现</p><p>而阅读时长是更为重要的参数</p><p>添加阅读时长预估能更有效的规划阅读时长</p><p>通过查看文档，只需要在博客的根配置文件_config.yaml添加以下代码即可支持统计字数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在主题的配置文件添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                   <span class="comment"># Average Word Length</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                 <span class="comment"># Words Per Minute（每分钟阅读词数）</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure><p>如果是使用next主题则可以添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_wordcount:</span> <span class="comment"># 字数统计</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span><span class="comment"># 是否显示文字</span></span><br><span class="line">  <span class="attr">wordcount:</span> <span class="literal">true</span><span class="comment"># 显示字数</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span><span class="comment"># 显示阅读时间</span></span><br><span class="line">  <span class="attr">totalcount:</span> <span class="literal">true</span><span class="comment"># 显示总数</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span><span class="comment"># 是否分开</span></span><br></pre></td></tr></table></figure><p>博文页面显示效果：</p><p><img src="/images/content-7-3.png"></p><h2 id="图片放大功能"><a href="#图片放大功能" class="headerlink" title="图片放大功能"></a>图片放大功能</h2><p>对于图片本身分辨率比较大，但网页显示比较小的情况</p><p>构成阅读困难的，可以添加单机图片放大的功能来实现</p><p>通过查询文档，可以得知在主题的配置文件中，将以下代码取消注释：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>同时要在主题的目录下安装对应模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone theme-next/theme-next-fancybox3 source/lib/fancybox</span><br></pre></td></tr></table></figure><p>博文页面显示效果：</p><p><img src="/images/content-7-4.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加社交账户跳转</title>
      <link href="/2023/08/17/%E6%B7%BB%E5%8A%A0%E7%A4%BE%E4%BA%A4%E8%B4%A6%E6%88%B7%E8%B7%B3%E8%BD%AC/"/>
      <url>/2023/08/17/%E6%B7%BB%E5%8A%A0%E7%A4%BE%E4%BA%A4%E8%B4%A6%E6%88%B7%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="让别人认识我和找到我"><a href="#让别人认识我和找到我" class="headerlink" title="让别人认识我和找到我"></a>让别人认识我和找到我</h2><p>通过几天对他人博客页面布局的了解</p><p>我也逐渐发现我的页面与他人页面的一些细微差别</p><p><img src="/images/content-6-1.png"></p><p>侧边栏是不是内容太少了</p><p>是不是应该加几个其他平台社交账户或者是自己的联系信息</p><span id="more"></span><h2 id="配置社交账户布局"><a href="#配置社交账户布局" class="headerlink" title="配置社交账户布局"></a>配置社交账户布局</h2><p>通过对Hexo布局的阅读，找到了相应的配置</p><p>通过对Next主题配置文件的修改，部署了几个常用社交账户的链接</p><p><img src="/images/content-6-2.png"></p><p>具体在页面的实现为：</p><p><img src="/images/content-6-3.png"></p><p>至此，完成了侧边栏的详细布局</p><p>之后可能会添加更多内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>添加博客背景图片</title>
      <link href="/2023/08/17/%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
      <url>/2023/08/17/%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h2 id="博客美化-2"><a href="#博客美化-2" class="headerlink" title="博客美化-2"></a>博客美化-2</h2><p>经过一系列优化之后，博客的页面也逐渐丰富起来</p><p>但是，总感觉缺少了点什么</p><p><img src="/images/content-6-1.png"></p><p>没错！是背景图！</p><p>白茫茫的一片看着怎么可能舒服</p><span id="more"></span><p>添加图片的支持：</p><p><img src="/images/background.jpg"></p><p>这张背景图片截图于Minecraft 基岩版的一个光影，叫做苦力怕光影</p><p>只可惜，因为基岩版渲染引擎变更为“渲染龙”，加之作者自身一系列问题</p><p>原作者不再更新光影</p><p>这样的神作成为了绝唱，让人感到惋惜</p><p>更改后的界面：</p><p><img src="/images/content-6-4.png"></p><p>顺便加上了其他的颜色样式</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决图片加载问题</title>
      <link href="/2023/08/16/%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/16/%E8%A7%A3%E5%86%B3%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="反思图片无法加载的问题"><a href="#反思图片无法加载的问题" class="headerlink" title="反思图片无法加载的问题"></a>反思图片无法加载的问题</h2><p>通过对md文件的了解，md文件内的图片是以路径形式存储</p><p>与word文件以压缩包存储不一样</p><p>所以，上传在博客内的博文无法正常显示图片</p><p>出现类似于链接一样的文本信息</p><p>那么如何解决图片无法加载的问题呢？</p><span id="more"></span><h2 id="使用Hexo自带的图片路径"><a href="#使用Hexo自带的图片路径" class="headerlink" title="使用Hexo自带的图片路径"></a>使用Hexo自带的图片路径</h2><p>根据Hexo博客的路径加载方式，发现图片的路径存放在public&#x2F;images中</p><p>在页面引用图片的时候，路径为&#x2F;images&#x2F;图片名</p><p>那么，我们可不可以之间将自己的图片放入到images文件夹内，然后通过md文件内映射呢？</p><p>答案显而易见：</p><p><img src="/images/content-5-1.png"></p><p>通过这样的映射成功将图片显示出来</p><p>但又有了一个新的问题</p><p>在撰写博文的时候，无法查看到自己加入的图片</p><p><img src="/images/content-5-2.png"></p><p>如何解决这个问题呢？</p><h2 id="使用在线图床"><a href="#使用在线图床" class="headerlink" title="使用在线图床"></a>使用在线图床</h2><p>我们都知道，md文件插入图片的方式是通过路径映射</p><p>那么除了本地文件映射，或者是项目内路径名映射</p><p>还能通过在线图床的路径映射！</p><p>理论存在，我可能需要建立一个图床了</p><p>可能的方式是：新建一个Github仓库，用仓库内文件的路径映射相应的内容</p><p>不过Github速度过于感人</p><p>为此我可能需要想一些其他方法将我的图片上传到云端上</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署新主题</title>
      <link href="/2023/08/16/%E9%83%A8%E7%BD%B2%E6%96%B0%E4%B8%BB%E9%A2%98/"/>
      <url>/2023/08/16/%E9%83%A8%E7%BD%B2%E6%96%B0%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="博客美化-1"><a href="#博客美化-1" class="headerlink" title="博客美化-1"></a>博客美化-1</h2><p>为了让原本单调的页面看起来更好看</p><p>我决定采用基于Next的主题模板</p><p>原本的页面长这样：</p><p><img src="/images/content-4-1.png"></p><span id="more"></span><p>经过初步的修改后，页面变成了这样：</p><p><img src="/images/content-4-2.png"></p><p>还不知道博客内的图片能不能正常显示</p><p>希望一切顺利进行！</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建自动更新</title>
      <link href="/2023/08/16/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
      <url>/2023/08/16/%E5%88%9B%E5%BB%BA%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="编写自动部署脚本"><a href="#编写自动部署脚本" class="headerlink" title="编写自动部署脚本"></a>编写自动部署脚本</h2><p>本博客基于著名的Hexo编写</p><p>所以，理论上所有的Hexo指令都可以使用</p><p>根据个人对Linux系统的了解以及对Shell命令行指令的学习</p><p>成功给本系统编写了一个自动部署的脚本</p><span id="more"></span><p>该文件存在与博客的根目录，文件名为Upload.sh和Save.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Upload.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;Starting Upload WeBlog to Network......&quot;</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">echo &quot;Make sure the network is open,uploading......&quot;</span><br><span class="line">hexo d</span><br><span class="line">echo &quot;Success!&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Save.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;Saving WeBlog......&quot;</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">echo &quot;Success!&quot;</span><br></pre></td></tr></table></figure><p>第一次编写用于实战的Shell，还是只能写这种基础的命令行</p><p>希望之后加上一些条件判断</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尝试部署主题</title>
      <link href="/2023/08/16/%E5%B0%9D%E8%AF%95%E9%83%A8%E7%BD%B2%E4%B8%BB%E9%A2%98/"/>
      <url>/2023/08/16/%E5%B0%9D%E8%AF%95%E9%83%A8%E7%BD%B2%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="尝试添加主题"><a href="#尝试添加主题" class="headerlink" title="尝试添加主题"></a>尝试添加主题</h2><p>为了让博客的页面不单调，我查阅了大量的资料，为自己的博客添加第三方主题</p><p>用以替换本身的样式，拯救本人不会前端与水火之地</p><p>[^不会前端纯属无奈（]: </p><p>如果一切顺利，那么会在下一个博客中成功应用主题内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> content </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>For This WeBlog</title>
      <link href="/2023/08/15/For-This-WeBlog/"/>
      <url>/2023/08/15/For-This-WeBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="一切的开始"><a href="#一切的开始" class="headerlink" title="一切的开始"></a>一切的开始</h2><p>第一次构建和使用属于自己的博客，花费了一天的时间，从创建博客库，到拉取博客页面模板，到编写博客基本配置文件，再到赋予域名解析，以及最后的写下此文档</p><p>真是难以掩盖的激动</p><p>如果没有任何意外情况，此博客将会一直存在</p><p>任何人都可以访问</p><p>博客的地址为: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.timbrown.top</span><br></pre></td></tr></table></figure><p>如果域名到期，将会提前使用和说明</p>]]></content>
      
      
      
        <tags>
            
            <tag> Introduction </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
